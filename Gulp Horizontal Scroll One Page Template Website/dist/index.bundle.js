/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var t={755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(i,o){"use strict";var r=[],s=Object.getPrototypeOf,a=r.slice,l=r.flat?function(e){return r.flat.call(e)}:function(e){return r.concat.apply([],e)},u=r.push,d=r.indexOf,c={},h=c.toString,p=c.hasOwnProperty,f=p.toString,m=f.call(Object),g={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},w=function(e){return null!=e&&e===e.window},y=i.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function _(e,t,n){var i,o,r=(n=n||y).createElement("script");if(r.text=e,t)for(i in b)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[h.call(e)]||"object":typeof e}var T="3.7.1",C=/HTML$/i,S=function(e,t){return new S.fn.init(e,t)};function k(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!v(e)&&!w(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function E(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}S.fn=S.prototype={jquery:T,constructor:S,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(e){return this.pushStack(S.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(S.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:r.sort,splice:r.splice},S.extend=S.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(u&&i&&(S.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[t],r=o&&!Array.isArray(n)?[]:o||S.isPlainObject(n)?n:{},o=!1,s[t]=S.extend(u,r,i)):void 0!==i&&(s[t]=i));return s},S.extend({expando:"jQuery"+(T+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e)||(t=s(e))&&("function"!=typeof(n=p.call(t,"constructor")&&t.constructor)||f.call(n)!==m))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){_(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(k(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},text:function(e){var t,n="",i=0,o=e.nodeType;if(!o)for(;t=e[i++];)n+=S.text(t);return 1===o||11===o?e.textContent:9===o?e.documentElement.textContent:3===o||4===o?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(k(Object(e))?S.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:d.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!C.test(t||n&&n.nodeName||"HTML")},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,s=[];if(k(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&s.push(o);return l(s)},guid:1,support:g}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=r[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){c["[object "+t+"]"]=t.toLowerCase()}));var P=r.pop,$=r.sort,A=r.splice,I="[\\x20\\t\\r\\n\\f]",D=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g");S.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var O=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function L(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}S.escapeSelector=function(e){return(e+"").replace(O,L)};var j=y,M=u;!function(){var e,t,n,o,s,l,u,c,h,f,m=M,v=S.expando,w=0,y=0,b=ee(),_=ee(),x=ee(),T=ee(),C=function(e,t){return e===t&&(s=!0),0},k="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="(?:\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",L="\\["+I+"*("+O+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+I+"*\\]",N=":("+O+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+L+")*)|.*)\\)|)",R=new RegExp(I+"+","g"),z=new RegExp("^"+I+"*,"+I+"*"),H=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),W=new RegExp(I+"|>"),q=new RegExp(N),F=new RegExp("^"+O+"$"),B={ID:new RegExp("^#("+O+")"),CLASS:new RegExp("^\\.("+O+")"),TAG:new RegExp("^("+O+"|[*])"),ATTR:new RegExp("^"+L),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+k+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},U=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,G=new RegExp("\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\([^\\r\\n\\f])","g"),V=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},Z=function(){le()},K=he((function(e){return!0===e.disabled&&E(e,"fieldset")}),{dir:"parentNode",next:"legend"});try{m.apply(r=a.call(j.childNodes),j.childNodes),r[j.childNodes.length].nodeType}catch(e){m={apply:function(e,t){M.apply(e,a.call(t))},call:function(e){M.apply(e,a.call(arguments,1))}}}function J(e,t,n,i){var o,r,s,a,u,d,p,f=t&&t.ownerDocument,w=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return n;if(!i&&(le(t),t=t||l,c)){if(11!==w&&(u=Y.exec(e)))if(o=u[1]){if(9===w){if(!(s=t.getElementById(o)))return n;if(s.id===o)return m.call(n,s),n}else if(f&&(s=f.getElementById(o))&&J.contains(t,s)&&s.id===o)return m.call(n,s),n}else{if(u[2])return m.apply(n,t.getElementsByTagName(e)),n;if((o=u[3])&&t.getElementsByClassName)return m.apply(n,t.getElementsByClassName(o)),n}if(!(T[e+" "]||h&&h.test(e))){if(p=e,f=t,1===w&&(W.test(e)||H.test(e))){for((f=Q.test(e)&&ae(t.parentNode)||t)==t&&g.scope||((a=t.getAttribute("id"))?a=S.escapeSelector(a):t.setAttribute("id",a=v)),r=(d=de(e)).length;r--;)d[r]=(a?"#"+a:":scope")+" "+ce(d[r]);p=d.join(",")}try{return m.apply(n,f.querySelectorAll(p)),n}catch(t){T(e,!0)}finally{a===v&&t.removeAttribute("id")}}}return we(e.replace(D,"$1"),t,n,i)}function ee(){var e=[];return function n(i,o){return e.push(i+" ")>t.cacheLength&&delete n[e.shift()],n[i+" "]=o}}function te(e){return e[v]=!0,e}function ne(e){var t=l.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ie(e){return function(t){return E(t,"input")&&t.type===e}}function oe(e){return function(t){return(E(t,"input")||E(t,"button"))&&t.type===e}}function re(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&K(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function se(e){return te((function(t){return t=+t,te((function(n,i){for(var o,r=e([],n.length,t),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))}))}))}function ae(e){return e&&void 0!==e.getElementsByTagName&&e}function le(e){var n,i=e?e.ownerDocument||e:j;return i!=l&&9===i.nodeType&&i.documentElement?(u=(l=i).documentElement,c=!S.isXMLDoc(l),f=u.matches||u.webkitMatchesSelector||u.msMatchesSelector,u.msMatchesSelector&&j!=l&&(n=l.defaultView)&&n.top!==n&&n.addEventListener("unload",Z),g.getById=ne((function(e){return u.appendChild(e).id=S.expando,!l.getElementsByName||!l.getElementsByName(S.expando).length})),g.disconnectedMatch=ne((function(e){return f.call(e,"*")})),g.scope=ne((function(){return l.querySelectorAll(":scope")})),g.cssHas=ne((function(){try{return l.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}})),g.getById?(t.filter.ID=function(e){var t=e.replace(G,V);return function(e){return e.getAttribute("id")===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&c){var n=t.getElementById(e);return n?[n]:[]}}):(t.filter.ID=function(e){var t=e.replace(G,V);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&c){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),t.find.TAG=function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},t.find.CLASS=function(e,t){if(void 0!==t.getElementsByClassName&&c)return t.getElementsByClassName(e)},h=[],ne((function(e){var t;u.appendChild(e).innerHTML="<a id='"+v+"' href='' disabled='disabled'></a><select id='"+v+"-\r\\' disabled='disabled'><option selected=''></option></select>",e.querySelectorAll("[selected]").length||h.push("\\["+I+"*(?:value|"+k+")"),e.querySelectorAll("[id~="+v+"-]").length||h.push("~="),e.querySelectorAll("a#"+v+"+*").length||h.push(".#.+[+~]"),e.querySelectorAll(":checked").length||h.push(":checked"),(t=l.createElement("input")).setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),u.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),(t=l.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||h.push("\\["+I+"*name"+I+"*="+I+"*(?:''|\"\")")})),g.cssHas||h.push(":has"),h=h.length&&new RegExp(h.join("|")),C=function(e,t){if(e===t)return s=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!g.sortDetached&&t.compareDocumentPosition(e)===n?e===l||e.ownerDocument==j&&J.contains(j,e)?-1:t===l||t.ownerDocument==j&&J.contains(j,t)?1:o?d.call(o,e)-d.call(o,t):0:4&n?-1:1)},l):l}for(e in J.matches=function(e,t){return J(e,null,null,t)},J.matchesSelector=function(e,t){if(le(e),c&&!T[t+" "]&&(!h||!h.test(t)))try{var n=f.call(e,t);if(n||g.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){T(t,!0)}return J(t,l,null,[e]).length>0},J.contains=function(e,t){return(e.ownerDocument||e)!=l&&le(e),S.contains(e,t)},J.attr=function(e,n){(e.ownerDocument||e)!=l&&le(e);var i=t.attrHandle[n.toLowerCase()],o=i&&p.call(t.attrHandle,n.toLowerCase())?i(e,n,!c):void 0;return void 0!==o?o:e.getAttribute(n)},J.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},S.uniqueSort=function(e){var t,n=[],i=0,r=0;if(s=!g.sortStable,o=!g.sortStable&&a.call(e,0),$.call(e,C),s){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)A.call(e,n[i],1)}return o=null,e},S.fn.uniqueSort=function(){return this.pushStack(S.uniqueSort(a.apply(this)))},t=S.expr={cacheLength:50,createPseudo:te,match:B,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(G,V),e[3]=(e[3]||e[4]||e[5]||"").replace(G,V),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||J.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&J.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return B.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&q.test(n)&&(t=de(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(G,V).toLowerCase();return"*"===e?function(){return!0}:function(e){return E(e,t)}},CLASS:function(e){var t=b[e+" "];return t||(t=new RegExp("(^|"+I+")"+e+"("+I+"|$)"))&&b(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var o=J.attr(i,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var u,d,c,h,p,f=r!==s?"nextSibling":"previousSibling",m=t.parentNode,g=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(r){for(;f;){for(c=t;c=c[f];)if(a?E(c,g):1===c.nodeType)return!1;p=f="only"===e&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&y){for(b=(h=(u=(d=m[v]||(m[v]={}))[e]||[])[0]===w&&u[1])&&u[2],c=h&&m.childNodes[h];c=++h&&c&&c[f]||(b=h=0)||p.pop();)if(1===c.nodeType&&++b&&c===t){d[e]=[w,h,b];break}}else if(y&&(b=h=(u=(d=t[v]||(t[v]={}))[e]||[])[0]===w&&u[1]),!1===b)for(;(c=++h&&c&&c[f]||(b=h=0)||p.pop())&&(!(a?E(c,g):1===c.nodeType)||!++b||(y&&((d=c[v]||(c[v]={}))[e]=[w,b]),c!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var i,o=t.pseudos[e]||t.setFilters[e.toLowerCase()]||J.error("unsupported pseudo: "+e);return o[v]?o(n):o.length>1?(i=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?te((function(e,t){for(var i,r=o(e,n),s=r.length;s--;)e[i=d.call(e,r[s])]=!(t[i]=r[s])})):function(e){return o(e,0,i)}):o}},pseudos:{not:te((function(e){var t=[],n=[],i=ve(e.replace(D,"$1"));return i[v]?te((function(e,t,n,o){for(var r,s=i(e,null,o,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))})):function(e,o,r){return t[0]=e,i(t,null,r,n),t[0]=null,!n.pop()}})),has:te((function(e){return function(t){return J(e,t).length>0}})),contains:te((function(e){return e=e.replace(G,V),function(t){return(t.textContent||S.text(t)).indexOf(e)>-1}})),lang:te((function(e){return F.test(e||"")||J.error("unsupported lang: "+e),e=e.replace(G,V).toLowerCase(),function(t){var n;do{if(n=c?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===u},focus:function(e){return e===function(){try{return l.activeElement}catch(e){}}()&&l.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:re(!1),disabled:re(!0),checked:function(e){return E(e,"input")&&!!e.checked||E(e,"option")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return U.test(e.nodeName)},button:function(e){return E(e,"input")&&"button"===e.type||E(e,"button")},text:function(e){var t;return E(e,"input")&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:se((function(){return[0]})),last:se((function(e,t){return[t-1]})),eq:se((function(e,t,n){return[n<0?n+t:n]})),even:se((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:se((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:se((function(e,t,n){var i;for(i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:se((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[e]=ie(e);for(e in{submit:!0,reset:!0})t.pseudos[e]=oe(e);function ue(){}function de(e,n){var i,o,r,s,a,l,u,d=_[e+" "];if(d)return n?0:d.slice(0);for(a=e,l=[],u=t.preFilter;a;){for(s in i&&!(o=z.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),i=!1,(o=H.exec(a))&&(i=o.shift(),r.push({value:i,type:o[0].replace(D," ")}),a=a.slice(i.length)),t.filter)!(o=B[s].exec(a))||u[s]&&!(o=u[s](o))||(i=o.shift(),r.push({value:i,type:s,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?J.error(e):_(e,l).slice(0)}function ce(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function he(e,t,n){var i=t.dir,o=t.next,r=o||i,s=n&&"parentNode"===r,a=y++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,l){var u,d,c=[w,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(d=t[v]||(t[v]={}),o&&E(t,o))t=t[i]||t;else{if((u=d[r])&&u[0]===w&&u[1]===a)return c[2]=u[2];if(d[r]=c,c[2]=e(t,n,l))return!0}return!1}}function pe(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function fe(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),u&&t.push(a)));return s}function me(e,t,n,i,o,r){return i&&!i[v]&&(i=me(i)),o&&!o[v]&&(o=me(o,r)),te((function(r,s,a,l){var u,c,h,p,f=[],g=[],v=s.length,w=r||function(e,t,n){for(var i=0,o=t.length;i<o;i++)J(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?w:fe(w,f,e,a,l);if(n?n(y,p=o||(r?e:v||i)?[]:s,a,l):p=y,i)for(u=fe(p,g),i(u,[],a,l),c=u.length;c--;)(h=u[c])&&(p[g[c]]=!(y[g[c]]=h));if(r){if(o||e){if(o){for(u=[],c=p.length;c--;)(h=p[c])&&u.push(y[c]=h);o(null,p=[],u,l)}for(c=p.length;c--;)(h=p[c])&&(u=o?d.call(r,h):f[c])>-1&&(r[u]=!(s[u]=h))}}else p=fe(p===s?p.splice(v,p.length):p),o?o(null,s,p,l):m.apply(s,p)}))}function ge(e){for(var i,o,r,s=e.length,a=t.relative[e[0].type],l=a||t.relative[" "],u=a?1:0,c=he((function(e){return e===i}),l,!0),h=he((function(e){return d.call(i,e)>-1}),l,!0),p=[function(e,t,o){var r=!a&&(o||t!=n)||((i=t).nodeType?c(e,t,o):h(e,t,o));return i=null,r}];u<s;u++)if(o=t.relative[e[u].type])p=[he(pe(p),o)];else{if((o=t.filter[e[u].type].apply(null,e[u].matches))[v]){for(r=++u;r<s&&!t.relative[e[r].type];r++);return me(u>1&&pe(p),u>1&&ce(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(D,"$1"),o,u<r&&ge(e.slice(u,r)),r<s&&ge(e=e.slice(r)),r<s&&ce(e))}p.push(o)}return pe(p)}function ve(e,i){var o,r=[],s=[],a=x[e+" "];if(!a){for(i||(i=de(e)),o=i.length;o--;)(a=ge(i[o]))[v]?r.push(a):s.push(a);a=x(e,function(e,i){var o=i.length>0,r=e.length>0,s=function(s,a,u,d,h){var p,f,g,v=0,y="0",b=s&&[],_=[],x=n,T=s||r&&t.find.TAG("*",h),C=w+=null==x?1:Math.random()||.1,k=T.length;for(h&&(n=a==l||a||h);y!==k&&null!=(p=T[y]);y++){if(r&&p){for(f=0,a||p.ownerDocument==l||(le(p),u=!c);g=e[f++];)if(g(p,a||l,u)){m.call(d,p);break}h&&(w=C)}o&&((p=!g&&p)&&v--,s&&b.push(p))}if(v+=y,o&&y!==v){for(f=0;g=i[f++];)g(b,_,a,u);if(s){if(v>0)for(;y--;)b[y]||_[y]||(_[y]=P.call(d));_=fe(_)}m.apply(d,_),h&&!s&&_.length>0&&v+i.length>1&&S.uniqueSort(d)}return h&&(w=C,n=x),b};return o?te(s):s}(s,r)),a.selector=e}return a}function we(e,n,i,o){var r,s,a,l,u,d="function"==typeof e&&e,h=!o&&de(e=d.selector||e);if(i=i||[],1===h.length){if((s=h[0]=h[0].slice(0)).length>2&&"ID"===(a=s[0]).type&&9===n.nodeType&&c&&t.relative[s[1].type]){if(!(n=(t.find.ID(a.matches[0].replace(G,V),n)||[])[0]))return i;d&&(n=n.parentNode),e=e.slice(s.shift().value.length)}for(r=B.needsContext.test(e)?0:s.length;r--&&(a=s[r],!t.relative[l=a.type]);)if((u=t.find[l])&&(o=u(a.matches[0].replace(G,V),Q.test(s[0].type)&&ae(n.parentNode)||n))){if(s.splice(r,1),!(e=o.length&&ce(s)))return m.apply(i,o),i;break}}return(d||ve(e,h))(o,n,!c,i,!n||Q.test(e)&&ae(n.parentNode)||n),i}ue.prototype=t.filters=t.pseudos,t.setFilters=new ue,g.sortStable=v.split("").sort(C).join("")===v,le(),g.sortDetached=ne((function(e){return 1&e.compareDocumentPosition(l.createElement("fieldset"))})),S.find=J,S.expr[":"]=S.expr.pseudos,S.unique=S.uniqueSort,J.compile=ve,J.select=we,J.setDocument=le,J.tokenize=de,J.escape=S.escapeSelector,J.getText=S.text,J.isXML=S.isXMLDoc,J.selectors=S.expr,J.support=S.support,J.uniqueSort=S.uniqueSort}();var N=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&S(e).is(n))break;i.push(e)}return i},R=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},z=S.expr.match.needsContext,H=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function W(e,t,n){return v(t)?S.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?S.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?S.grep(e,(function(e){return d.call(t,e)>-1!==n})):S.filter(t,e,n)}S.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?S.find.matchesSelector(i,e)?[i]:[]:S.find.matches(e,S.grep(t,(function(e){return 1===e.nodeType})))},S.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(S(e).filter((function(){for(t=0;t<i;t++)if(S.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)S.find(e,o[t],n);return i>1?S.uniqueSort(n):n},filter:function(e){return this.pushStack(W(this,e||[],!1))},not:function(e){return this.pushStack(W(this,e||[],!0))},is:function(e){return!!W(this,"string"==typeof e&&z.test(e)?S(e):e||[],!1).length}});var q,F=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:F.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:y,!0)),H.test(i[1])&&S.isPlainObject(t))for(i in t)v(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=y.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,q=S(y);var B=/^(?:parents|prev(?:Until|All))/,U={children:!0,contents:!0,next:!0,prev:!0};function X(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,o=this.length,r=[],s="string"!=typeof e&&S(e);if(!z.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&S.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?S.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?d.call(S(e),this[0]):d.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return N(e,"parentNode")},parentsUntil:function(e,t,n){return N(e,"parentNode",n)},next:function(e){return X(e,"nextSibling")},prev:function(e){return X(e,"previousSibling")},nextAll:function(e){return N(e,"nextSibling")},prevAll:function(e){return N(e,"previousSibling")},nextUntil:function(e,t,n){return N(e,"nextSibling",n)},prevUntil:function(e,t,n){return N(e,"previousSibling",n)},siblings:function(e){return R((e.parentNode||{}).firstChild,e)},children:function(e){return R(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(E(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},(function(e,t){S.fn[e]=function(n,i){var o=S.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=S.filter(i,o)),this.length>1&&(U[e]||S.uniqueSort(o),B.test(e)&&o.reverse()),this.pushStack(o)}}));var Y=/[^\x20\t\r\n\f]+/g;function Q(e){return e}function G(e){throw e}function V(e,t,n,i){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return S.each(e.match(Y)||[],(function(e,n){t[n]=!0})),t}(e):S.extend({},e);var t,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},u={add:function(){return r&&(n&&!t&&(a=r.length-1,s.push(n)),function t(n){S.each(n,(function(n,i){v(i)?e.unique&&u.has(i)||r.push(i):i&&i.length&&"string"!==x(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return S.each(arguments,(function(e,t){for(var n;(n=S.inArray(t,r,n))>-1;)r.splice(n,1),n<=a&&a--})),this},has:function(e){return e?S.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||t||(r=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},S.extend({Deferred:function(e){var t=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return S.Deferred((function(n){S.each(t,(function(t,i){var o=v(e[i[4]])&&e[i[4]];r[i[1]]((function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,o){var r=0;function s(e,t,n,o){return function(){var a=this,l=arguments,u=function(){var i,u;if(!(e<r)){if((i=n.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");u=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(u)?o?u.call(i,s(r,t,Q,o),s(r,t,G,o)):(r++,u.call(i,s(r,t,Q,o),s(r,t,G,o),s(r,t,Q,t.notifyWith))):(n!==Q&&(a=void 0,l=[i]),(o||t.resolveWith)(a,l))}},d=o?u:function(){try{u()}catch(i){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(i,d.error),e+1>=r&&(n!==G&&(a=void 0,l=[i]),t.rejectWith(a,l))}};e?d():(S.Deferred.getErrorHook?d.error=S.Deferred.getErrorHook():S.Deferred.getStackHook&&(d.error=S.Deferred.getStackHook()),i.setTimeout(d))}}return S.Deferred((function(i){t[0][3].add(s(0,i,v(o)?o:Q,i.notifyWith)),t[1][3].add(s(0,i,v(e)?e:Q)),t[2][3].add(s(0,i,v(n)?n:G))})).promise()},promise:function(e){return null!=e?S.extend(e,o):o}},r={};return S.each(t,(function(e,i){var s=i[2],a=i[5];o[i[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(i[3].fire),r[i[0]]=function(){return r[i[0]+"With"](this===r?void 0:this,arguments),this},r[i[0]+"With"]=s.fireWith})),o.promise(r),e&&e.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),o=a.call(arguments),r=S.Deferred(),s=function(e){return function(n){i[e]=this,o[e]=arguments.length>1?a.call(arguments):n,--t||r.resolveWith(i,o)}};if(t<=1&&(V(e,r.done(s(n)).resolve,r.reject,!t),"pending"===r.state()||v(o[n]&&o[n].then)))return r.then();for(;n--;)V(o[n],s(n),r.reject);return r.promise()}});var Z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&Z.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){i.setTimeout((function(){throw e}))};var K=S.Deferred();function J(){y.removeEventListener("DOMContentLoaded",J),i.removeEventListener("load",J),S.ready()}S.fn.ready=function(e){return K.then(e).catch((function(e){S.readyException(e)})),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==e&&--S.readyWait>0||K.resolveWith(y,[S]))}}),S.ready.then=K.then,"complete"===y.readyState||"loading"!==y.readyState&&!y.documentElement.doScroll?i.setTimeout(S.ready):(y.addEventListener("DOMContentLoaded",J),i.addEventListener("load",J));var ee=function(e,t,n,i,o,r,s){var a=0,l=e.length,u=null==n;if("object"===x(n))for(a in o=!0,n)ee(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,v(i)||(s=!0),u&&(s?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(S(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:u?t.call(e):l?t(e[0],n):r},te=/^-ms-/,ne=/-([a-z])/g;function ie(e,t){return t.toUpperCase()}function oe(e){return e.replace(te,"ms-").replace(ne,ie)}var re=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function se(){this.expando=S.expando+se.uid++}se.uid=1,se.prototype={cache:function(e){var t=e[this.expando];return t||(t={},re(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[oe(t)]=n;else for(i in t)o[oe(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][oe(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(oe):(t=oe(t))in i?[t]:t.match(Y)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||S.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var ae=new se,le=new se,ue=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,de=/[A-Z]/g;function ce(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(de,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ue.test(e)?JSON.parse(e):e)}(n)}catch(e){}le.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return le.hasData(e)||ae.hasData(e)},data:function(e,t,n){return le.access(e,t,n)},removeData:function(e,t){le.remove(e,t)},_data:function(e,t,n){return ae.access(e,t,n)},_removeData:function(e,t){ae.remove(e,t)}}),S.fn.extend({data:function(e,t){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(o=le.get(r),1===r.nodeType&&!ae.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=oe(i.slice(5)),ce(r,i,o[i]));ae.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){le.set(this,e)})):ee(this,(function(t){var n;if(r&&void 0===t)return void 0!==(n=le.get(r,e))||void 0!==(n=ce(r,e))?n:void 0;this.each((function(){le.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){le.remove(this,e)}))}}),S.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=ae.get(e,t),n&&(!i||Array.isArray(n)?i=ae.access(e,t,S.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=S.queue(e,t),i=n.length,o=n.shift(),r=S._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,(function(){S.dequeue(e,t)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ae.get(e,n)||ae.access(e,n,{empty:S.Callbacks("once memory").add((function(){ae.remove(e,[t+"queue",n])}))})}}),S.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?S.queue(this[0],e):void 0===t?this:this.each((function(){var n=S.queue(this,e,t);S._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&S.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){S.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=S.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=ae.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}});var he=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,pe=new RegExp("^(?:([+-])=|)("+he+")([a-z%]*)$","i"),fe=["Top","Right","Bottom","Left"],me=y.documentElement,ge=function(e){return S.contains(e.ownerDocument,e)},ve={composed:!0};me.getRootNode&&(ge=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(ve)===e.ownerDocument});var we=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ge(e)&&"none"===S.css(e,"display")};function ye(e,t,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return S.css(e,t,"")},l=a(),u=n&&n[3]||(S.cssNumber[t]?"":"px"),d=e.nodeType&&(S.cssNumber[t]||"px"!==u&&+l)&&pe.exec(S.css(e,t));if(d&&d[3]!==u){for(l/=2,u=u||d[3],d=+l||1;s--;)S.style(e,t,d+u),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),d/=r;d*=2,S.style(e,t,d+u),n=n||[]}return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=d,i.end=o)),o}var be={};function _e(e){var t,n=e.ownerDocument,i=e.nodeName,o=be[i];return o||(t=n.body.appendChild(n.createElement(i)),o=S.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),be[i]=o,o)}function xe(e,t){for(var n,i,o=[],r=0,s=e.length;r<s;r++)(i=e[r]).style&&(n=i.style.display,t?("none"===n&&(o[r]=ae.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&we(i)&&(o[r]=_e(i))):"none"!==n&&(o[r]="none",ae.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}S.fn.extend({show:function(){return xe(this,!0)},hide:function(){return xe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){we(this)?S(this).show():S(this).hide()}))}});var Te,Ce,Se=/^(?:checkbox|radio)$/i,ke=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ee=/^$|^module$|\/(?:java|ecma)script/i;Te=y.createDocumentFragment().appendChild(y.createElement("div")),(Ce=y.createElement("input")).setAttribute("type","radio"),Ce.setAttribute("checked","checked"),Ce.setAttribute("name","t"),Te.appendChild(Ce),g.checkClone=Te.cloneNode(!0).cloneNode(!0).lastChild.checked,Te.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!Te.cloneNode(!0).lastChild.defaultValue,Te.innerHTML="<option></option>",g.option=!!Te.lastChild;var Pe={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function $e(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&E(e,t)?S.merge([e],n):n}function Ae(e,t){for(var n=0,i=e.length;n<i;n++)ae.set(e[n],"globalEval",!t||ae.get(t[n],"globalEval"))}Pe.tbody=Pe.tfoot=Pe.colgroup=Pe.caption=Pe.thead,Pe.th=Pe.td,g.option||(Pe.optgroup=Pe.option=[1,"<select multiple='multiple'>","</select>"]);var Ie=/<|&#?\w+;/;function De(e,t,n,i,o){for(var r,s,a,l,u,d,c=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((r=e[p])||0===r)if("object"===x(r))S.merge(h,r.nodeType?[r]:r);else if(Ie.test(r)){for(s=s||c.appendChild(t.createElement("div")),a=(ke.exec(r)||["",""])[1].toLowerCase(),l=Pe[a]||Pe._default,s.innerHTML=l[1]+S.htmlPrefilter(r)+l[2],d=l[0];d--;)s=s.lastChild;S.merge(h,s.childNodes),(s=c.firstChild).textContent=""}else h.push(t.createTextNode(r));for(c.textContent="",p=0;r=h[p++];)if(i&&S.inArray(r,i)>-1)o&&o.push(r);else if(u=ge(r),s=$e(c.appendChild(r),"script"),u&&Ae(s),n)for(d=0;r=s[d++];)Ee.test(r.type||"")&&n.push(r);return c}var Oe=/^([^.]*)(?:\.(.+)|)/;function Le(){return!0}function je(){return!1}function Me(e,t,n,i,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Me(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=je;else if(!o)return e;return 1===r&&(s=o,o=function(e){return S().off(e),s.apply(this,arguments)},o.guid=s.guid||(s.guid=S.guid++)),e.each((function(){S.event.add(this,t,o,i,n)}))}function Ne(e,t,n){n?(ae.set(e,t,!1),S.event.add(e,t,{namespace:!1,handler:function(e){var n,i=ae.get(this,t);if(1&e.isTrigger&&this[t]){if(i)(S.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),ae.set(this,t,i),this[t](),n=ae.get(this,t),ae.set(this,t,!1),i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n}else i&&(ae.set(this,t,S.event.trigger(i[0],i.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=Le)}})):void 0===ae.get(e,t)&&S.event.add(e,t,Le)}S.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,u,d,c,h,p,f,m,g=ae.get(e);if(re(e))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&S.find.matchesSelector(me,o),n.guid||(n.guid=S.guid++),(l=g.events)||(l=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(Y)||[""]).length;u--;)p=m=(a=Oe.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p&&(c=S.event.special[p]||{},p=(o?c.delegateType:c.bindType)||p,c=S.event.special[p]||{},d=S.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&S.expr.match.needsContext.test(o),namespace:f.join(".")},r),(h=l[p])||((h=l[p]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,i,f,s)||e.addEventListener&&e.addEventListener(p,s)),c.add&&(c.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,d):h.push(d),S.event.global[p]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,u,d,c,h,p,f,m,g=ae.hasData(e)&&ae.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(Y)||[""]).length;u--;)if(p=m=(a=Oe.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p){for(c=S.event.special[p]||{},h=l[p=(i?c.delegateType:c.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=h.length;r--;)d=h[r],!o&&m!==d.origType||n&&n.guid!==d.guid||a&&!a.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(h.splice(r,1),d.selector&&h.delegateCount--,c.remove&&c.remove.call(e,d));s&&!h.length&&(c.teardown&&!1!==c.teardown.call(e,f,g.handle)||S.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)S.event.remove(e,p+t[u],n,i,!0);S.isEmptyObject(l)&&ae.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,s,a=new Array(arguments.length),l=S.event.fix(e),u=(ae.get(this,"events")||Object.create(null))[l.type]||[],d=S.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(s=S.event.handlers.call(this,l,u),t=0;(o=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((S.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,o,r,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=t[n]).selector+" "]&&(s[o]=i.needsContext?S(o,this).index(u)>-1:S.find(o,this,null,[u]).length),s[o]&&r.push(i);r.length&&a.push({elem:u,handlers:r})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return Se.test(t.type)&&t.click&&E(t,"input")&&Ne(t,"click",!0),!1},trigger:function(e){var t=this||e;return Se.test(t.type)&&t.click&&E(t,"input")&&Ne(t,"click"),!0},_default:function(e){var t=e.target;return Se.test(t.type)&&t.click&&E(t,"input")&&ae.get(t,"click")||E(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Le:je,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:je,isPropagationStopped:je,isImmediatePropagationStopped:je,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Le,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Le,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Le,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},(function(e,t){function n(e){if(y.documentMode){var n=ae.get(this,"handle"),i=S.event.fix(e);i.type="focusin"===e.type?"focus":"blur",i.isSimulated=!0,n(e),i.target===i.currentTarget&&n(i)}else S.event.simulate(t,e.target,S.event.fix(e))}S.event.special[e]={setup:function(){var i;if(Ne(this,e,!0),!y.documentMode)return!1;(i=ae.get(this,t))||this.addEventListener(t,n),ae.set(this,t,(i||0)+1)},trigger:function(){return Ne(this,e),!0},teardown:function(){var e;if(!y.documentMode)return!1;(e=ae.get(this,t)-1)?ae.set(this,t,e):(this.removeEventListener(t,n),ae.remove(this,t))},_default:function(t){return ae.get(t.target,e)},delegateType:t},S.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,o=y.documentMode?this:i,r=ae.get(o,t);r||(y.documentMode?this.addEventListener(t,n):i.addEventListener(e,n,!0)),ae.set(o,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=y.documentMode?this:i,r=ae.get(o,t)-1;r?ae.set(o,t,r):(y.documentMode?this.removeEventListener(t,n):i.removeEventListener(e,n,!0),ae.remove(o,t))}}})),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){S.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,o=e.handleObj;return i&&(i===this||S.contains(this,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),S.fn.extend({on:function(e,t,n,i){return Me(this,e,t,n,i)},one:function(e,t,n,i){return Me(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,S(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=je),this.each((function(){S.event.remove(this,e,n,t)}))}});var Re=/<script|<style|<link/i,ze=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function We(e,t){return E(e,"table")&&E(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function qe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Fe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Be(e,t){var n,i,o,r,s,a;if(1===t.nodeType){if(ae.hasData(e)&&(a=ae.get(e).events))for(o in ae.remove(t,"handle events"),a)for(n=0,i=a[o].length;n<i;n++)S.event.add(t,o,a[o][n]);le.hasData(e)&&(r=le.access(e),s=S.extend({},r),le.set(t,s))}}function Ue(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Se.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Xe(e,t,n,i){t=l(t);var o,r,s,a,u,d,c=0,h=e.length,p=h-1,f=t[0],m=v(f);if(m||h>1&&"string"==typeof f&&!g.checkClone&&ze.test(f))return e.each((function(o){var r=e.eq(o);m&&(t[0]=f.call(this,o,r.html())),Xe(r,t,n,i)}));if(h&&(r=(o=De(t,e[0].ownerDocument,!1,e,i)).firstChild,1===o.childNodes.length&&(o=r),r||i)){for(a=(s=S.map($e(o,"script"),qe)).length;c<h;c++)u=o,c!==p&&(u=S.clone(u,!0,!0),a&&S.merge(s,$e(u,"script"))),n.call(e[c],u,c);if(a)for(d=s[s.length-1].ownerDocument,S.map(s,Fe),c=0;c<a;c++)u=s[c],Ee.test(u.type||"")&&!ae.access(u,"globalEval")&&S.contains(d,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?S._evalUrl&&!u.noModule&&S._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},d):_(u.textContent.replace(He,""),u,d))}return e}function Ye(e,t,n){for(var i,o=t?S.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||S.cleanData($e(i)),i.parentNode&&(n&&ge(i)&&Ae($e(i,"script")),i.parentNode.removeChild(i));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,s,a=e.cloneNode(!0),l=ge(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(s=$e(a),i=0,o=(r=$e(e)).length;i<o;i++)Ue(r[i],s[i]);if(t)if(n)for(r=r||$e(e),s=s||$e(a),i=0,o=r.length;i<o;i++)Be(r[i],s[i]);else Be(e,a);return(s=$e(a,"script")).length>0&&Ae(s,!l&&$e(e,"script")),a},cleanData:function(e){for(var t,n,i,o=S.event.special,r=0;void 0!==(n=e[r]);r++)if(re(n)){if(t=n[ae.expando]){if(t.events)for(i in t.events)o[i]?S.event.remove(n,i):S.removeEvent(n,i,t.handle);n[ae.expando]=void 0}n[le.expando]&&(n[le.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Ye(this,e,!0)},remove:function(e){return Ye(this,e)},text:function(e){return ee(this,(function(e){return void 0===e?S.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Xe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||We(this,e).appendChild(e)}))},prepend:function(){return Xe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=We(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Xe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Xe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData($e(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return S.clone(this,e,t)}))},html:function(e){return ee(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Re.test(e)&&!Pe[(ke.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData($e(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Xe(this,arguments,(function(t){var n=this.parentNode;S.inArray(this,e)<0&&(S.cleanData($e(this)),n&&n.replaceChild(t,this))}),e)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){S.fn[e]=function(e){for(var n,i=[],o=S(e),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),S(o[s])[t](n),u.apply(i,n.get());return this.pushStack(i)}}));var Qe=new RegExp("^("+he+")(?!px)[a-z%]+$","i"),Ge=/^--/,Ve=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},Ze=function(e,t,n){var i,o,r={};for(o in t)r[o]=e.style[o],e.style[o]=t[o];for(o in i=n.call(e),t)e.style[o]=r[o];return i},Ke=new RegExp(fe.join("|"),"i");function Je(e,t,n){var i,o,r,s,a=Ge.test(t),l=e.style;return(n=n||Ve(e))&&(s=n.getPropertyValue(t)||n[t],a&&s&&(s=s.replace(D,"$1")||void 0),""!==s||ge(e)||(s=S.style(e,t)),!g.pixelBoxStyles()&&Qe.test(s)&&Ke.test(t)&&(i=l.width,o=l.minWidth,r=l.maxWidth,l.minWidth=l.maxWidth=l.width=s,s=n.width,l.width=i,l.minWidth=o,l.maxWidth=r)),void 0!==s?s+"":s}function et(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",me.appendChild(u).appendChild(d);var e=i.getComputedStyle(d);n="1%"!==e.top,l=12===t(e.marginLeft),d.style.right="60%",s=36===t(e.right),o=36===t(e.width),d.style.position="absolute",r=12===t(d.offsetWidth/3),me.removeChild(u),d=null}}function t(e){return Math.round(parseFloat(e))}var n,o,r,s,a,l,u=y.createElement("div"),d=y.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===d.style.backgroundClip,S.extend(g,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),r},reliableTrDimensions:function(){var e,t,n,o;return null==a&&(e=y.createElement("table"),t=y.createElement("tr"),n=y.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="box-sizing:content-box;border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",me.appendChild(e).appendChild(t).appendChild(n),o=i.getComputedStyle(t),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===t.offsetHeight,me.removeChild(e)),a}}))}();var tt=["Webkit","Moz","ms"],nt=y.createElement("div").style,it={};function ot(e){return S.cssProps[e]||it[e]||(e in nt?e:it[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=tt.length;n--;)if((e=tt[n]+t)in nt)return e}(e)||e)}var rt=/^(none|table(?!-c[ea]).+)/,st={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function lt(e,t,n){var i=pe.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function ut(e,t,n,i,o,r){var s="width"===t?1:0,a=0,l=0,u=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=S.css(e,n+fe[s],!0,o)),i?("content"===n&&(l-=S.css(e,"padding"+fe[s],!0,o)),"margin"!==n&&(l-=S.css(e,"border"+fe[s]+"Width",!0,o))):(l+=S.css(e,"padding"+fe[s],!0,o),"padding"!==n?l+=S.css(e,"border"+fe[s]+"Width",!0,o):a+=S.css(e,"border"+fe[s]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l+u}function dt(e,t,n){var i=Ve(e),o=(!g.boxSizingReliable()||n)&&"border-box"===S.css(e,"boxSizing",!1,i),r=o,s=Je(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Qe.test(s)){if(!n)return s;s="auto"}return(!g.boxSizingReliable()&&o||!g.reliableTrDimensions()&&E(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===S.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===S.css(e,"boxSizing",!1,i),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ut(e,t,n||(o?"border":"content"),r,i,s)+"px"}function ct(e,t,n,i,o){return new ct.prototype.init(e,t,n,i,o)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Je(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=oe(t),l=Ge.test(t),u=e.style;if(l||(t=ot(a)),s=S.cssHooks[t]||S.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:u[t];"string"==(r=typeof n)&&(o=pe.exec(n))&&o[1]&&(n=ye(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(S.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var o,r,s,a=oe(t);return Ge.test(t)||(t=ot(a)),(s=S.cssHooks[t]||S.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Je(e,t,i)),"normal"===o&&t in at&&(o=at[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),S.each(["height","width"],(function(e,t){S.cssHooks[t]={get:function(e,n,i){if(n)return!rt.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?dt(e,t,i):Ze(e,st,(function(){return dt(e,t,i)}))},set:function(e,n,i){var o,r=Ve(e),s=!g.scrollboxSize()&&"absolute"===r.position,a=(s||i)&&"border-box"===S.css(e,"boxSizing",!1,r),l=i?ut(e,t,i,a,r):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-ut(e,t,"border",!1,r)-.5)),l&&(o=pe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=S.css(e,t)),lt(0,n,l)}}})),S.cssHooks.marginLeft=et(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Je(e,"marginLeft"))||e.getBoundingClientRect().left-Ze(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),S.each({margin:"",padding:"",border:"Width"},(function(e,t){S.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+fe[i]+t]=r[i]||r[i-2]||r[0];return o}},"margin"!==e&&(S.cssHooks[e+t].set=lt)})),S.fn.extend({css:function(e,t){return ee(this,(function(e,t,n){var i,o,r={},s=0;if(Array.isArray(t)){for(i=Ve(e),o=t.length;s<o;s++)r[t[s]]=S.css(e,t[s],!1,i);return r}return void 0!==n?S.style(e,t,n):S.css(e,t)}),e,t,arguments.length>1)}}),S.Tween=ct,ct.prototype={constructor:ct,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(S.cssNumber[n]?"":"px")},cur:function(){var e=ct.propHooks[this.prop];return e&&e.get?e.get(this):ct.propHooks._default.get(this)},run:function(e){var t,n=ct.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ct.propHooks._default.set(this),this}},ct.prototype.init.prototype=ct.prototype,ct.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[ot(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}},ct.propHooks.scrollTop=ct.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=ct.prototype.init,S.fx.step={};var ht,pt,ft=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;function gt(){pt&&(!1===y.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(gt):i.setTimeout(gt,S.fx.interval),S.fx.tick())}function vt(){return i.setTimeout((function(){ht=void 0})),ht=Date.now()}function wt(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=fe[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function yt(e,t,n){for(var i,o=(bt.tweeners[t]||[]).concat(bt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function bt(e,t,n){var i,o,r=0,s=bt.prefilters.length,a=S.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=ht||vt(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),r=0,s=u.tweens.length;r<s;r++)u.tweens[r].run(i);return a.notifyWith(e,[u,i,n]),i<1&&s?n:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:t,originalOptions:n,startTime:ht||vt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=S.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),d=u.props;for(function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=oe(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=S.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(d,u.opts.specialEasing);r<s;r++)if(i=bt.prefilters[r].call(u,e,d,u.opts))return v(i.stop)&&(S._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return S.map(d,yt,u),v(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),S.fx.timer(S.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}S.Animation=S.extend(bt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ye(n.elem,e,pe.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(Y);for(var n,i=0,o=e.length;i<o;i++)n=e[i],bt.tweeners[n]=bt.tweeners[n]||[],bt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,s,a,l,u,d,c="width"in t||"height"in t,h=this,p={},f=e.style,m=e.nodeType&&we(e),g=ae.get(e,"fxshow");for(i in n.queue||(null==(s=S._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always((function(){h.always((function(){s.unqueued--,S.queue(e,"fx").length||s.empty.fire()}))}))),t)if(o=t[i],ft.test(o)){if(delete t[i],r=r||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;m=!0}p[i]=g&&g[i]||S.style(e,i)}if((l=!S.isEmptyObject(t))||!S.isEmptyObject(p))for(i in c&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=g&&g.display)&&(u=ae.get(e,"display")),"none"===(d=S.css(e,"display"))&&(u?d=u:(xe([e],!0),u=e.style.display||u,d=S.css(e,"display"),xe([e]))),("inline"===d||"inline-block"===d&&null!=u)&&"none"===S.css(e,"float")&&(l||(h.done((function(){f.display=u})),null==u&&(d=f.display,u="none"===d?"":d)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always((function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}))),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=ae.access(e,"fxshow",{display:u}),r&&(g.hidden=!m),m&&xe([e],!0),h.done((function(){for(i in m||xe([e]),ae.remove(e,"fxshow"),p)S.style(e,i,p[i])}))),l=yt(m?g[i]:0,i,h),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?bt.prefilters.unshift(e):bt.prefilters.push(e)}}),S.speed=function(e,t,n){var i=e&&"object"==typeof e?S.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return S.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in S.fx.speeds?i.duration=S.fx.speeds[i.duration]:i.duration=S.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&S.dequeue(this,i.queue)},i},S.fn.extend({fadeTo:function(e,t,n,i){return this.filter(we).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=S.isEmptyObject(e),r=S.speed(t,n,i),s=function(){var t=bt(this,S.extend({},e),r);(o||ae.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",r=S.timers,s=ae.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&mt.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||S.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=ae.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=S.timers,s=i?i.length:0;for(n.finish=!0,S.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),S.each(["toggle","show","hide"],(function(e,t){var n=S.fn[t];S.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(wt(t,!0),e,i,o)}})),S.each({slideDown:wt("show"),slideUp:wt("hide"),slideToggle:wt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){S.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(ht=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),ht=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){pt||(pt=!0,gt())},S.fx.stop=function(){pt=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(e,t){return e=S.fx&&S.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var o=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(o)}}))},function(){var e=y.createElement("input"),t=y.createElement("select").appendChild(y.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=y.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var _t,xt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return ee(this,S.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){S.removeAttr(this,e)}))}}),S.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?S.prop(e,t,n):(1===r&&S.isXMLDoc(e)||(o=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?_t:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:null==(i=S.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&E(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(Y);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),_t={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=xt[t]||S.find.attr;xt[t]=function(e,t,i){var o,r,s=t.toLowerCase();return i||(r=xt[s],xt[s]=o,o=null!=n(e,t,i)?s:null,xt[s]=r),o}}));var Tt=/^(?:input|select|textarea|button)$/i,Ct=/^(?:a|area)$/i;function St(e){return(e.match(Y)||[]).join(" ")}function kt(e){return e.getAttribute&&e.getAttribute("class")||""}function Et(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Y)||[]}S.fn.extend({prop:function(e,t){return ee(this,S.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[S.propFix[e]||e]}))}}),S.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&S.isXMLDoc(e)||(t=S.propFix[t]||t,o=S.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):Tt.test(e.nodeName)||Ct.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){S.propFix[this.toLowerCase()]=this})),S.fn.extend({addClass:function(e){var t,n,i,o,r,s;return v(e)?this.each((function(t){S(this).addClass(e.call(this,t,kt(this)))})):(t=Et(e)).length?this.each((function(){if(i=kt(this),n=1===this.nodeType&&" "+St(i)+" "){for(r=0;r<t.length;r++)o=t[r],n.indexOf(" "+o+" ")<0&&(n+=o+" ");s=St(n),i!==s&&this.setAttribute("class",s)}})):this},removeClass:function(e){var t,n,i,o,r,s;return v(e)?this.each((function(t){S(this).removeClass(e.call(this,t,kt(this)))})):arguments.length?(t=Et(e)).length?this.each((function(){if(i=kt(this),n=1===this.nodeType&&" "+St(i)+" "){for(r=0;r<t.length;r++)for(o=t[r];n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");s=St(n),i!==s&&this.setAttribute("class",s)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,i,o,r,s=typeof e,a="string"===s||Array.isArray(e);return v(e)?this.each((function(n){S(this).toggleClass(e.call(this,n,kt(this),t),t)})):"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):(n=Et(e),this.each((function(){if(a)for(r=S(this),o=0;o<n.length;o++)i=n[o],r.hasClass(i)?r.removeClass(i):r.addClass(i);else void 0!==e&&"boolean"!==s||((i=kt(this))&&ae.set(this,"__className__",i),this.setAttribute&&this.setAttribute("class",i||!1===e?"":ae.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+St(kt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Pt=/\r/g;S.fn.extend({val:function(e){var t,n,i,o=this[0];return arguments.length?(i=v(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=i?e.call(this,n,S(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=S.map(o,(function(e){return null==e?"":e+""}))),(t=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=S.valHooks[o.type]||S.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(Pt,""):null==n?"":n:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:St(S.text(e))}},select:{get:function(e){var t,n,i,o=e.options,r=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!E(n.parentNode,"optgroup"))){if(t=S(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,o=e.options,r=S.makeArray(t),s=o.length;s--;)((i=o[s]).selected=S.inArray(S.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),S.each(["radio","checkbox"],(function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=S.inArray(S(e).val(),t)>-1}},g.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}));var $t=i.location,At={guid:Date.now()},It=/\?/;S.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||S.error("Invalid XML: "+(n?S.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Dt=/^(?:focusinfocus|focusoutblur)$/,Ot=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,n,o){var r,s,a,l,u,d,c,h,f=[n||y],m=p.call(e,"type")?e.type:e,g=p.call(e,"namespace")?e.namespace.split("."):[];if(s=h=a=n=n||y,3!==n.nodeType&&8!==n.nodeType&&!Dt.test(m+S.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[S.expando]?e:new S.Event(m,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:S.makeArray(t,[e]),c=S.event.special[m]||{},o||!c.trigger||!1!==c.trigger.apply(n,t))){if(!o&&!c.noBubble&&!w(n)){for(l=c.delegateType||m,Dt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(n.ownerDocument||y)&&f.push(a.defaultView||a.parentWindow||i)}for(r=0;(s=f[r++])&&!e.isPropagationStopped();)h=s,e.type=r>1?l:c.bindType||m,(d=(ae.get(s,"events")||Object.create(null))[e.type]&&ae.get(s,"handle"))&&d.apply(s,t),(d=u&&s[u])&&d.apply&&re(s)&&(e.result=d.apply(s,t),!1===e.result&&e.preventDefault());return e.type=m,o||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(f.pop(),t)||!re(n)||u&&v(n[m])&&!w(n)&&((a=n[u])&&(n[u]=null),S.event.triggered=m,e.isPropagationStopped()&&h.addEventListener(m,Ot),n[m](),e.isPropagationStopped()&&h.removeEventListener(m,Ot),S.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var i=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(i,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each((function(){S.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}});var Lt=/\[\]$/,jt=/\r?\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Rt(e,t,n,i){var o;if(Array.isArray(t))S.each(t,(function(t,o){n||Lt.test(e)?i(e,o):Rt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)}));else if(n||"object"!==x(t))i(e,t);else for(o in t)Rt(e+"["+o+"]",t[o],n,i)}S.param=function(e,t){var n,i=[],o=function(e,t){var n=v(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,(function(){o(this.name,this.value)}));else for(n in e)Rt(n,e[n],t,o);return i.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&Nt.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!Se.test(e))})).map((function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,(function(e){return{name:t.name,value:e.replace(jt,"\r\n")}})):{name:t.name,value:n.replace(jt,"\r\n")}})).get()}});var zt=/%20/g,Ht=/#.*$/,Wt=/([?&])_=[^&]*/,qt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ft=/^(?:GET|HEAD)$/,Bt=/^\/\//,Ut={},Xt={},Yt="*/".concat("*"),Qt=y.createElement("a");function Gt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(Y)||[];if(v(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Vt(e,t,n,i){var o={},r=e===Xt;function s(a){var l;return o[a]=!0,S.each(e[a]||[],(function(e,a){var u=a(t,n,i);return"string"!=typeof u||r||o[u]?r?!(l=u):void 0:(t.dataTypes.unshift(u),s(u),!1)})),l}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Zt(e,t){var n,i,o=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&S.extend(!0,e,i),e}Qt.href=$t.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:$t.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test($t.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Yt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,S.ajaxSettings),t):Zt(S.ajaxSettings,e)},ajaxPrefilter:Gt(Ut),ajaxTransport:Gt(Xt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o,r,s,a,l,u,d,c,h,p=S.ajaxSetup({},t),f=p.context||p,m=p.context&&(f.nodeType||f.jquery)?S(f):S.event,g=S.Deferred(),v=S.Callbacks("once memory"),w=p.statusCode||{},b={},_={},x="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=qt.exec(r);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?r:null},setRequestHeader:function(e,t){return null==u&&(e=_[e.toLowerCase()]=_[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==u&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||x;return n&&n.abort(t),C(0,t),this}};if(g.promise(T),p.url=((e||p.url||$t.href)+"").replace(Bt,$t.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(Y)||[""],null==p.crossDomain){l=y.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Qt.protocol+"//"+Qt.host!=l.protocol+"//"+l.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=S.param(p.data,p.traditional)),Vt(Ut,p,t,T),u)return T;for(c in(d=S.event&&p.global)&&0==S.active++&&S.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Ft.test(p.type),o=p.url.replace(Ht,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(zt,"+")):(h=p.url.slice(o.length),p.data&&(p.processData||"string"==typeof p.data)&&(o+=(It.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(Wt,"$1"),h=(It.test(o)?"&":"?")+"_="+At.guid+++h),p.url=o+h),p.ifModified&&(S.lastModified[o]&&T.setRequestHeader("If-Modified-Since",S.lastModified[o]),S.etag[o]&&T.setRequestHeader("If-None-Match",S.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Yt+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(c,p.headers[c]);if(p.beforeSend&&(!1===p.beforeSend.call(f,T,p)||u))return T.abort();if(x="abort",v.add(p.complete),T.done(p.success),T.fail(p.error),n=Vt(Xt,p,t,T)){if(T.readyState=1,d&&m.trigger("ajaxSend",[T,p]),u)return T;p.async&&p.timeout>0&&(a=i.setTimeout((function(){T.abort("timeout")}),p.timeout));try{u=!1,n.send(b,C)}catch(e){if(u)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,s,l){var c,h,y,b,_,x=t;u||(u=!0,a&&i.clearTimeout(a),n=void 0,r=l||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(b=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(p,T,s)),!c&&S.inArray("script",p.dataTypes)>-1&&S.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),b=function(e,t,n,i){var o,r,s,a,l,u={},d=e.dataTypes.slice();if(d[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(r=d.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=d.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=u[l+" "+r]||u["* "+r]))for(o in u)if((a=o.split(" "))[1]===r&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[o]:!0!==u[o]&&(r=a[0],d.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(p,b,T,c),c?(p.ifModified&&((_=T.getResponseHeader("Last-Modified"))&&(S.lastModified[o]=_),(_=T.getResponseHeader("etag"))&&(S.etag[o]=_)),204===e||"HEAD"===p.type?x="nocontent":304===e?x="notmodified":(x=b.state,h=b.data,c=!(y=b.error))):(y=x,!e&&x||(x="error",e<0&&(e=0))),T.status=e,T.statusText=(t||x)+"",c?g.resolveWith(f,[h,x,T]):g.rejectWith(f,[T,x,y]),T.statusCode(w),w=void 0,d&&m.trigger(c?"ajaxSuccess":"ajaxError",[T,p,c?h:y]),v.fireWith(f,[T,x]),d&&(m.trigger("ajaxComplete",[T,p]),--S.active||S.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],(function(e,t){S[t]=function(e,n,i,o){return v(n)&&(o=o||i,i=n,n=void 0),S.ajax(S.extend({url:e,type:t,dataType:o,data:n,success:i},S.isPlainObject(e)&&e))}})),S.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){S(this).wrapInner(e.call(this,t))})):this.each((function(){var t=S(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){S(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){S(this).replaceWith(this.childNodes)})),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var Kt={0:200,1223:204},Jt=S.ajaxSettings.xhr();g.cors=!!Jt&&"withCredentials"in Jt,g.ajax=Jt=!!Jt,S.ajaxTransport((function(e){var t,n;if(g.cors||Jt&&!e.crossDomain)return{send:function(o,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Kt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),S.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),S.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,o){t=S("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),y.head.appendChild(t[0])},abort:function(){n&&n()}}}));var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||S.expando+"_"+At.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",(function(e,t,n){var o,r,s,a=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(nn,"$1"+o):!1!==e.jsonp&&(e.url+=(It.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||S.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=i[o],i[o]=function(){s=arguments},n.always((function(){void 0===r?S(i).removeProp(o):i[o]=r,e[o]&&(e.jsonpCallback=t.jsonpCallback,tn.push(o)),s&&v(r)&&r(s[0]),s=r=void 0})),"script"})),g.createHTMLDocument=((en=y.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),S.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((i=(t=y.implementation.createHTMLDocument("")).createElement("base")).href=y.location.href,t.head.appendChild(i)):t=y),r=!n&&[],(o=H.exec(e))?[t.createElement(o[1])]:(o=De([e],t,r),r&&r.length&&S(r).remove(),S.merge([],o.childNodes)));var i,o,r},S.fn.load=function(e,t,n){var i,o,r,s=this,a=e.indexOf(" ");return a>-1&&(i=St(e.slice(a)),e=e.slice(0,a)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&S.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){r=arguments,s.html(i?S("<div>").append(S.parseHTML(e)).find(i):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,r||[e.responseText,t,e])}))}),this},S.expr.pseudos.animated=function(e){return S.grep(S.timers,(function(t){return e===t.elem})).length},S.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,u=S.css(e,"position"),d=S(e),c={};"static"===u&&(e.style.position="relative"),a=d.offset(),r=S.css(e,"top"),l=S.css(e,"left"),("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1?(s=(i=d.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),v(t)&&(t=t.call(e,n,S.extend({},a))),null!=t.top&&(c.top=t.top-a.top+s),null!=t.left&&(c.left=t.left-a.left+o),"using"in t?t.using.call(e,c):d.css(c)}},S.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){S.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===S.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),o.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-S.css(i,"marginTop",!0),left:t.left-o.left-S.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||me}))}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;S.fn[e]=function(i){return ee(this,(function(e,i,o){var r;if(w(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===o)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o}),e,i,arguments.length)}})),S.each(["top","left"],(function(e,t){S.cssHooks[t]=et(g.pixelPosition,(function(e,n){if(n)return n=Je(e,t),Qe.test(n)?S(e).position()[t]+"px":n}))})),S.each({Height:"height",Width:"width"},(function(e,t){S.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){S.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return ee(this,(function(t,n,o){var r;return w(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?S.css(t,n,a):S.style(t,n,o,a)}),t,s?o:void 0,s)}}))})),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){S.fn[t]=function(e){return this.on(t,e)}})),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.on("mouseenter",e).on("mouseleave",t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){S.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var on=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;S.proxy=function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return i=a.call(arguments,2),o=function(){return e.apply(t||this,i.concat(a.call(arguments)))},o.guid=e.guid=e.guid||S.guid++,o},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=E,S.isFunction=v,S.isWindow=w,S.camelCase=oe,S.type=x,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(on,"$1")},void 0===(n=function(){return S}.apply(t,[]))||(e.exports=n);var rn=i.jQuery,sn=i.$;return S.noConflict=function(e){return i.$===S&&(i.$=sn),e&&i.jQuery===S&&(i.jQuery=rn),S},void 0===o&&(i.jQuery=i.$=S),S}))},202:function(t,n,i){var o,r,a,l,u,d,c,h,p,f,m,g,v,w,y,b,_,x,T;window.pluginsAttached?alert("Attention: plugins.js library is attached twice and needs to be removed. The slides.min.js already contains both of scripts."):window.pluginsAttached=1,function(e){e.extend(e,{cacheImage:function(t,n){if("object"!=typeof t){var i=new Image;return n=n||{},e.each(["load","error","abort"],(function(){var t=String(this);"function"==typeof n[t]&&e(i).bind(t,n[t]),"function"==typeof n.complete&&e(i).bind(t,n.complete)})),i.src=t,i}e.each(t,(function(){e.cacheImage(String(this),n)}))}}),e.extend(e.fn,{cacheImage:function(t){return this.each((function(){e.cacheImage(this.src,t)}))}})}(jQuery),$.fn.redraw=function(){$(this).each((function(){this.offsetHeight}))},_=[i(755)],b=function(e){function t(t){var s=t||window.event,a=l.call(arguments,1),u=0,c=0,h=0,p=0,f=0,m=0;if((t=e.event.fix(s)).type="mousewheel","detail"in s&&(h=-1*s.detail),"wheelDelta"in s&&(h=s.wheelDelta),"wheelDeltaY"in s&&(h=s.wheelDeltaY),"wheelDeltaX"in s&&(c=-1*s.wheelDeltaX),"axis"in s&&s.axis===s.HORIZONTAL_AXIS&&(c=-1*h,h=0),u=0===h?c:h,"deltaY"in s&&(u=h=-1*s.deltaY),"deltaX"in s&&(c=s.deltaX,0===h&&(u=-1*c)),0!==h||0!==c){if(1===s.deltaMode){var g=e.data(this,"mousewheel-line-height");u*=g,h*=g,c*=g}else if(2===s.deltaMode){var v=e.data(this,"mousewheel-page-height");u*=v,h*=v,c*=v}if(p=Math.max(Math.abs(h),Math.abs(c)),(!r||r>p)&&(r=p,i(s,p)&&(r/=40)),i(s,p)&&(u/=40,c/=40,h/=40),u=Math[u>=1?"floor":"ceil"](u/r),c=Math[c>=1?"floor":"ceil"](c/r),h=Math[h>=1?"floor":"ceil"](h/r),d.settings.normalizeOffset&&this.getBoundingClientRect){var w=this.getBoundingClientRect();f=t.clientX-w.left,m=t.clientY-w.top}return t.deltaX=c,t.deltaY=h,t.deltaFactor=r,t.offsetX=f,t.offsetY=m,t.deltaMode=0,a.unshift(t,u,c,h),o&&clearTimeout(o),o=setTimeout(n,200),(e.event.dispatch||e.event.handle).apply(this,a)}}function n(){r=null}function i(e,t){return d.settings.adjustOldDeltas&&"mousewheel"===e.type&&t%120==0}var o,r,s=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],a="onwheel"in document||document.documentMode>=9?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],l=Array.prototype.slice;if(e.event.fixHooks)for(var u=s.length;u;)e.event.fixHooks[s[--u]]=e.event.mouseHooks;var d=e.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var n=a.length;n;)this.addEventListener(a[--n],t,!1);else this.onmousewheel=t;e.data(this,"mousewheel-line-height",d.getLineHeight(this)),e.data(this,"mousewheel-page-height",d.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var n=a.length;n;)this.removeEventListener(a[--n],t,!1);else this.onmousewheel=null;e.removeData(this,"mousewheel-line-height"),e.removeData(this,"mousewheel-page-height")},getLineHeight:function(t){var n=e(t),i=n["offsetParent"in e.fn?"offsetParent":"parent"]();return i.length||(i=e("body")),parseInt(i.css("fontSize"),10)||parseInt(n.css("fontSize"),10)||16},getPageHeight:function(t){return e(t).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};e.fn.extend({mousewheel:function(e){return e?this.bind("mousewheel",e):this.trigger("mousewheel")},unmousewheel:function(e){return this.unbind("mousewheel",e)}})},void 0===(x="function"==typeof b?b.apply(n,_):b)||(t.exports=x),$.fn.removeClassByPrefix=function(e){return this.each((function(t,n){var i=n.className.split(" ").filter((function(t){return 0!==t.lastIndexOf(e,0)}));n.className=$.trim(i.join(" "))})),this},function(e,t){var n={eventName:"resizeEnd",delay:250,poll:function(){var t=e(this),i=t.data(n.eventName);i.timeoutId&&window.clearTimeout(i.timeoutId),i.timeoutId=window.setTimeout((function(){t.trigger(n.eventName)}),n.delay)}};e.event.special[n.eventName]={setup:function(){var t=e(this);t.data(n.eventName,{}),t.on("resize",n.poll)},teardown:function(){var t=e(this),i=t.data(n.eventName);i.timeoutId&&window.clearTimeout(i.timeoutId),t.removeData(n.eventName),t.off("resize",n.poll)}},e.fn[n.eventName]=function(e,t){return arguments.length>0?this.on(n.eventName,null,e,t):this.trigger(n.eventName)}}(jQuery),T=function(e){var t="left",n="right",i="up",o="down",r="in",s="out",a="none",l="auto",u="swipe",d="pinch",c="tap",h="doubletap",p="longtap",f="horizontal",m="vertical",g="all",v=10,w="start",y="move",b="end",_="cancel",x="ontouchstart"in window,T=window.navigator.msPointerEnabled&&!window.navigator.pointerEnabled,C=window.navigator.pointerEnabled||window.navigator.msPointerEnabled,S="TouchSwipe";function k(t){return!t||void 0!==t.allowPageScroll||void 0===t.swipe&&void 0===t.swipeStatus||(t.allowPageScroll=a),void 0!==t.click&&void 0===t.tap&&(t.tap=t.click),t||(t={}),t=e.extend({},e.fn.swipe.defaults,t),this.each((function(){var n=e(this),i=n.data(S);i||(i=new E(this,t),n.data(S,i))}))}function E(k,E){var P=x||C||!E.fallbackToMouseEvents,$=P?C?T?"MSPointerDown":"pointerdown":"touchstart":"mousedown",A=P?C?T?"MSPointerMove":"pointermove":"touchmove":"mousemove",I=P?C?T?"MSPointerUp":"pointerup":"touchend":"mouseup",D=P?null:"mouseleave",O=C?T?"MSPointerCancel":"pointercancel":"touchcancel",L=0,j=null,M=0,N=0,R=0,z=1,H=0,W=0,q=null,F=e(k),B="start",U=0,X=null,Y=0,Q=0,G=0,V=0,Z=0,K=null,J=null;try{F.bind($,ee),F.bind(O,ie)}catch(t){e.error("events not supported "+$+","+O+" on jQuery.swipe")}function ee(r){if(!0!==F.data(S+"_intouch")&&!(e(r.target).closest(E.excludedElements,F).length>0)){var s,a=r.originalEvent?r.originalEvent:r,l=x?a.touches[0]:a;return B=w,x?U=a.touches.length:r.preventDefault(),L=0,j=null,W=null,M=0,N=0,R=0,z=1,H=0,X=function(){for(var e=[],t=0;t<=5;t++)e.push({start:{x:0,y:0},end:{x:0,y:0},identifier:0});return e}(),q=function(){var e={};return e[t]=Ee(t),e[n]=Ee(n),e[i]=Ee(i),e[o]=Ee(o),e}(),_e(),!x||U===E.fingers||E.fingers===g||pe()?(Ce(0,l),Y=Ae(),2==U&&(Ce(1,a.touches[1]),N=R=$e(X[0].start,X[1].start)),(E.swipeStatus||E.pinchStatus)&&(s=ae(a,B))):s=!1,!1===s?(ae(a,B=_),s):(E.hold&&(J=setTimeout(e.proxy((function(){F.trigger("hold",[a.target]),E.hold&&(s=E.hold.call(F,a,a.target))}),this),E.longTapThreshold)),Te(!0),null)}}function te(u){var d=u.originalEvent?u.originalEvent:u;if(B!==b&&B!==_&&!xe()){var c,h=Se(x?d.touches[0]:d);if(Q=Ae(),x&&(U=d.touches.length),E.hold&&clearTimeout(J),B=y,2==U&&(0==N?(Ce(1,d.touches[1]),N=R=$e(X[0].start,X[1].start)):(Se(d.touches[1]),R=$e(X[0].end,X[1].end),X[0].end,X[1].end,W=z<1?s:r),z=function(e,t){return(t/e*1).toFixed(2)}(N,R),H=Math.abs(N-R)),U===E.fingers||E.fingers===g||!x||pe()){if(j=function(e,r){var s=function(e,t){var n=e.x-t.x,i=t.y-e.y,o=Math.atan2(i,n),r=Math.round(180*o/Math.PI);return r<0&&(r=360-Math.abs(r)),r}(e,r);return s<=45&&s>=0||s<=360&&s>=315?t:s>=135&&s<=225?n:s>45&&s<135?o:i}(h.start,h.end),function(e,r){if(E.allowPageScroll===a||pe())e.preventDefault();else{var s=E.allowPageScroll===l;switch(r){case t:(E.swipeLeft&&s||!s&&E.allowPageScroll!=f)&&e.preventDefault();break;case n:(E.swipeRight&&s||!s&&E.allowPageScroll!=f)&&e.preventDefault();break;case i:(E.swipeUp&&s||!s&&E.allowPageScroll!=m)&&e.preventDefault();break;case o:(E.swipeDown&&s||!s&&E.allowPageScroll!=m)&&e.preventDefault()}}}(u,j),L=function(e,t){return Math.round(Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)))}(h.start,h.end),M=Pe(),function(e,t){t=Math.max(t,ke(e)),q[e].distance=t}(j,L),(E.swipeStatus||E.pinchStatus)&&(c=ae(d,B)),!E.triggerOnTouchEnd||E.triggerOnTouchLeave){var p=!0;if(E.triggerOnTouchLeave){var v=function(t){var n=(t=e(t)).offset();return{left:n.left,right:n.left+t.outerWidth(),top:n.top,bottom:n.top+t.outerHeight()}}(this);p=function(e,t){return e.x>t.left&&e.x<t.right&&e.y>t.top&&e.y<t.bottom}(h.end,v)}!E.triggerOnTouchEnd&&p?B=se(y):E.triggerOnTouchLeave&&!p&&(B=se(b)),B!=_&&B!=b||ae(d,B)}}else ae(d,B=_);!1===c&&ae(d,B=_)}}function ne(e){var t=e.originalEvent;return x&&t.touches.length>0?(G=Ae(),V=event.touches.length+1,!0):(xe()&&(U=V),Q=Ae(),M=Pe(),de()||!ue()?ae(t,B=_):E.triggerOnTouchEnd||0==E.triggerOnTouchEnd&&B===y?(e.preventDefault(),ae(t,B=b)):!E.triggerOnTouchEnd&&we()?le(t,B=b,c):B===y&&ae(t,B=_),Te(!1),null)}function ie(){U=0,Q=0,Y=0,N=0,R=0,z=1,_e(),Te(!1)}function oe(e){var t=e.originalEvent;E.triggerOnTouchLeave&&ae(t,B=se(b))}function re(){F.unbind($,ee),F.unbind(O,ie),F.unbind(A,te),F.unbind(I,ne),D&&F.unbind(D,oe),Te(!1)}function se(e){var t=e,n=ce(),i=ue(),o=de();return!n||o?t=_:!i||e!=y||E.triggerOnTouchEnd&&!E.triggerOnTouchLeave?!i&&e==b&&E.triggerOnTouchLeave&&(t=_):t=b,t}function ae(e,t){var n=void 0;return fe()&&me()||me()?n=le(e,t,u):(he()&&pe()||pe())&&!1!==n&&(n=le(e,t,d)),be()&&ye()&&!1!==n?n=le(e,t,h):M>E.longTapThreshold&&L<v&&E.longTap&&!1!==n?n=le(e,t,p):1!==U&&x||!(isNaN(L)||L<E.threshold)||!we()||!1===n||(n=le(e,t,c)),t===_&&ie(),t===b&&(x?0==e.touches.length&&ie():ie()),n}function le(a,l,f){var m=void 0;if(f==u){if(F.trigger("swipeStatus",[l,j||null,L||0,M||0,U,X]),E.swipeStatus&&!1===(m=E.swipeStatus.call(F,a,l,j||null,L||0,M||0,U,X)))return!1;if(l==b&&fe()){if(F.trigger("swipe",[j,L,M,U,X]),E.swipe&&!1===(m=E.swipe.call(F,a,j,L,M,U,X)))return!1;switch(j){case t:F.trigger("swipeLeft",[j,L,M,U,X]),E.swipeLeft&&(m=E.swipeLeft.call(F,a,j,L,M,U,X));break;case n:F.trigger("swipeRight",[j,L,M,U,X]),E.swipeRight&&(m=E.swipeRight.call(F,a,j,L,M,U,X));break;case i:F.trigger("swipeUp",[j,L,M,U,X]),E.swipeUp&&(m=E.swipeUp.call(F,a,j,L,M,U,X));break;case o:F.trigger("swipeDown",[j,L,M,U,X]),E.swipeDown&&(m=E.swipeDown.call(F,a,j,L,M,U,X))}}}if(f==d){if(F.trigger("pinchStatus",[l,W||null,H||0,M||0,U,z,X]),E.pinchStatus&&!1===(m=E.pinchStatus.call(F,a,l,W||null,H||0,M||0,U,z,X)))return!1;if(l==b&&he())switch(W){case r:F.trigger("pinchIn",[W||null,H||0,M||0,U,z,X]),E.pinchIn&&(m=E.pinchIn.call(F,a,W||null,H||0,M||0,U,z,X));break;case s:F.trigger("pinchOut",[W||null,H||0,M||0,U,z,X]),E.pinchOut&&(m=E.pinchOut.call(F,a,W||null,H||0,M||0,U,z,X))}}return f==c?l!==_&&l!==b||(clearTimeout(K),clearTimeout(J),ye()&&!be()?(Z=Ae(),K=setTimeout(e.proxy((function(){Z=null,F.trigger("tap",[a.target]),E.tap&&(m=E.tap.call(F,a,a.target))}),this),E.doubleTapThreshold)):(Z=null,F.trigger("tap",[a.target]),E.tap&&(m=E.tap.call(F,a,a.target)))):f==h?l!==_&&l!==b||(clearTimeout(K),Z=null,F.trigger("doubletap",[a.target]),E.doubleTap&&(m=E.doubleTap.call(F,a,a.target))):f==p&&(l!==_&&l!==b||(clearTimeout(K),Z=null,F.trigger("longtap",[a.target]),E.longTap&&(m=E.longTap.call(F,a,a.target)))),m}function ue(){var e=!0;return null!==E.threshold&&(e=L>=E.threshold),e}function de(){var e=!1;return null!==E.cancelThreshold&&null!==j&&(e=ke(j)-L>=E.cancelThreshold),e}function ce(){return!(E.maxTimeThreshold&&M>=E.maxTimeThreshold)}function he(){var e=ge(),t=ve(),n=null===E.pinchThreshold||H>=E.pinchThreshold;return e&&t&&n}function pe(){return!!(E.pinchStatus||E.pinchIn||E.pinchOut)}function fe(){var e=ce(),t=ue(),n=ge(),i=ve();return!de()&&i&&n&&t&&e}function me(){return!!(E.swipe||E.swipeStatus||E.swipeLeft||E.swipeRight||E.swipeUp||E.swipeDown)}function ge(){return U===E.fingers||E.fingers===g||!x}function ve(){return 0!==X[0].end.x}function we(){return!!E.tap}function ye(){return!!E.doubleTap}function be(){if(null==Z)return!1;var e=Ae();return ye()&&e-Z<=E.doubleTapThreshold}function _e(){G=0,V=0}function xe(){var e=!1;return G&&Ae()-G<=E.fingerReleaseThreshold&&(e=!0),e}function Te(e){!0===e?(F.bind(A,te),F.bind(I,ne),D&&F.bind(D,oe)):(F.unbind(A,te,!1),F.unbind(I,ne,!1),D&&F.unbind(D,oe,!1)),F.data(S+"_intouch",!0===e)}function Ce(e,t){var n=void 0!==t.identifier?t.identifier:0;return X[e].identifier=n,X[e].start.x=X[e].end.x=t.pageX||t.clientX,X[e].start.y=X[e].end.y=t.pageY||t.clientY,X[e]}function Se(e){var t=function(e){for(var t=0;t<X.length;t++)if(X[t].identifier==e)return X[t]}(void 0!==e.identifier?e.identifier:0);return t.end.x=e.pageX||e.clientX,t.end.y=e.pageY||e.clientY,t}function ke(e){if(q[e])return q[e].distance}function Ee(e){return{direction:e,distance:0}}function Pe(){return Q-Y}function $e(e,t){var n=Math.abs(e.x-t.x),i=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+i*i))}function Ae(){return(new Date).getTime()}this.enable=function(){return F.bind($,ee),F.bind(O,ie),F},this.disable=function(){return re(),F},this.destroy=function(){return re(),F.data(S,null),F},this.option=function(t,n){if(void 0!==E[t]){if(void 0===n)return E[t];E[t]=n}else e.error("Option "+t+" does not exist on jQuery.swipe.options");return null}}e.fn.swipe=function(t){var n=e(this),i=n.data(S);if(i&&"string"==typeof t){if(i[t])return i[t].apply(this,Array.prototype.slice.call(arguments,1));e.error("Method "+t+" does not exist on jQuery.swipe")}else if(!(i||"object"!=typeof t&&t))return k.apply(this,arguments);return n},e.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:"label, button, input, select, textarea, a, .noSwipe"},e.fn.swipe.phases={PHASE_START:w,PHASE_MOVE:y,PHASE_END:b,PHASE_CANCEL:_},e.fn.swipe.directions={LEFT:t,RIGHT:n,UP:i,DOWN:o,IN:r,OUT:s},e.fn.swipe.pageScroll={NONE:a,HORIZONTAL:f,VERTICAL:m,AUTO:l},e.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,ALL:g}},i.amdO.jQuery?(_=[i(755)],void 0===(x="function"==typeof(b=T)?b.apply(n,_):b)||(t.exports=x)):T(jQuery),function(t,n,i,o){var r="sharrre",a={className:"sharrre",share:{googlePlus:!1,facebook:!1,twitter:!1,digg:!1,delicious:!1,stumbleupon:!1,linkedin:!1,pinterest:!1},shareTotal:0,template:"",title:"",url:i.location.href,text:i.title,urlCurl:"sharrre.php",count:{},total:0,shorterTotal:!0,enableHover:!0,enableCounter:!0,enableTracking:!1,hover:function(){},hide:function(){},click:function(){},render:function(){},buttons:{googlePlus:{url:"",urlCount:!1,size:"medium",lang:"en-US",annotation:""},facebook:{url:"",urlCount:!1,action:"like",layout:"button_count",width:"",send:"false",faces:"false",colorscheme:"",font:"",lang:"en_US"},twitter:{url:"",urlCount:!1,count:"horizontal",hashtags:"",via:"",related:"",lang:"en"},digg:{url:"",urlCount:!1,type:"DiggCompact"},delicious:{url:"",urlCount:!1,size:"medium"},stumbleupon:{url:"",urlCount:!1,layout:"1"},linkedin:{url:"",urlCount:!1,counter:""},pinterest:{url:"",media:"",description:"",layout:"horizontal"}}},l={googlePlus:"",facebook:"https://graph.facebook.com/fql?q=SELECT%20url,%20normalized_url,%20share_count,%20like_count,%20comment_count,%20total_count,commentsbox_count,%20comments_fbid,%20click_count%20FROM%20link_stat%20WHERE%20url=%27{url}%27&callback=?",twitter:"http://cdn.api.twitter.com/1/urls/count.json?url={url}&callback=?",digg:"http://services.digg.com/2.0/story.getInfo?links={url}&type=javascript&callback=?",delicious:"http://feeds.delicious.com/v2/json/urlinfo/data?url={url}&callback=?",stumbleupon:"",linkedin:"http://www.linkedin.com/countserv/count/share?format=jsonp&url={url}&callback=?",pinterest:"http://api.pinterest.com/v1/urls/count.json?url={url}&callback=?"},u={googlePlus:function(e){var o=e.options.buttons.googlePlus;t(e.element).find(".buttons").append('<div class="button googleplus"><div class="g-plusone" data-size="'+o.size+'" data-href="'+(""!==o.url?o.url:e.options.url)+'" data-annotation="'+o.annotation+'"></div></div>'),n.___gcfg={lang:e.options.buttons.googlePlus.lang};var r=0;"undefined"==typeof gapi&&0==r?(r=1,function(){var e=i.createElement("script");e.type="text/javascript",e.async=!0,e.src="//apis.google.com/js/plusone.js";var t=i.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}()):gapi.plusone.go()},facebook:function(e){var n=e.options.buttons.facebook;t(e.element).find(".buttons").append('<div class="button facebook"><div id="fb-root"></div><div class="fb-like" data-href="'+(""!==n.url?n.url:e.options.url)+'" data-send="'+n.send+'" data-layout="'+n.layout+'" data-width="'+n.width+'" data-show-faces="'+n.faces+'" data-action="'+n.action+'" data-colorscheme="'+n.colorscheme+'" data-font="'+n.font+'" data-via="'+n.via+'"></div></div>');var o,r,s,a,l,u=0;"undefined"==typeof FB&&0==u?(u=1,r="script",s="facebook-jssdk",l=(o=i).getElementsByTagName(r)[0],o.getElementById(s)||((a=o.createElement(r)).id=s,a.src="//connect.facebook.net/"+n.lang+"/all.js#xfbml=1",l.parentNode.insertBefore(a,l))):FB.XFBML.parse()},twitter:function(e){var n=e.options.buttons.twitter;t(e.element).find(".buttons").append('<div class="button twitter"><a href="https://twitter.com/share" class="twitter-share-button" data-url="'+(""!==n.url?n.url:e.options.url)+'" data-count="'+n.count+'" data-text="'+e.options.text+'" data-via="'+n.via+'" data-hashtags="'+n.hashtags+'" data-related="'+n.related+'" data-lang="'+n.lang+'">Tweet</a></div>');var o=0;"undefined"==typeof twttr&&0==o?(o=1,function(){var e=i.createElement("script");e.type="text/javascript",e.async=!0,e.src="//platform.twitter.com/widgets.js";var t=i.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}()):t.ajax({url:"//platform.twitter.com/widgets.js",dataType:"script",cache:!0})},digg:function(e){var n=e.options.buttons.digg;t(e.element).find(".buttons").append('<div class="button digg"><a class="DiggThisButton '+n.type+'" rel="nofollow external" href="http://digg.com/submit?url='+encodeURIComponent(""!==n.url?n.url:e.options.url)+'"></a></div>');var o,r,s=0;"undefined"==typeof __DBW&&0==s&&(s=1,o=i.createElement("SCRIPT"),r=i.getElementsByTagName("SCRIPT")[0],o.type="text/javascript",o.async=!0,o.src="//widgets.digg.com/buttons.js",r.parentNode.insertBefore(o,r))},delicious:function(e){if("tall"==e.options.buttons.delicious.size)var n="width:50px;",i="height:35px;width:50px;font-size:15px;line-height:35px;",o="height:18px;line-height:18px;margin-top:3px;";else n="width:93px;",i="float:right;padding:0 3px;height:20px;width:26px;line-height:20px;",o="float:left;height:20px;line-height:20px;";var r=e.shorterTotal(e.options.count.delicious);void 0===r&&(r=0),t(e.element).find(".buttons").append('<div class="button delicious"><div style="'+n+'font:12px Arial,Helvetica,sans-serif;cursor:pointer;color:#666666;display:inline-block;float:none;height:20px;line-height:normal;margin:0;padding:0;text-indent:0;vertical-align:baseline;"><div style="'+i+'background-color:#fff;margin-bottom:5px;overflow:hidden;text-align:center;border:1px solid #ccc;border-radius:3px;">'+r+'</div><div style="'+o+'display:block;padding:0;text-align:center;text-decoration:none;width:50px;background-color:#7EACEE;border:1px solid #40679C;border-radius:3px;color:#fff;"><img src="http://www.delicious.com/static/img/delicious.small.gif" height="10" width="10" alt="Delicious" /> Add</div></div></div>'),t(e.element).find(".delicious").on("click",(function(){e.openPopup("delicious")}))},stumbleupon:function(e){var o=e.options.buttons.stumbleupon;t(e.element).find(".buttons").append('<div class="button stumbleupon"><su:badge layout="'+o.layout+'" location="'+(""!==o.url?o.url:e.options.url)+'"></su:badge></div>');var r=0;"undefined"==typeof STMBLPN&&0==r?(r=1,function(){var e=i.createElement("script");e.type="text/javascript",e.async=!0,e.src="//platform.stumbleupon.com/1/widgets.js";var t=i.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}(),s=n.setTimeout((function(){"undefined"!=typeof STMBLPN&&(STMBLPN.processWidgets(),clearInterval(s))}),500)):STMBLPN.processWidgets()},linkedin:function(e){var o=e.options.buttons.linkedin;t(e.element).find(".buttons").append('<div class="button linkedin"><script type="in/share" data-url="'+(""!==o.url?o.url:e.options.url)+'" data-counter="'+o.counter+'"><\/script></div>');var r=0;void 0===n.IN&&0==r?(r=1,function(){var e=i.createElement("script");e.type="text/javascript",e.async=!0,e.src="//platform.linkedin.com/in.js";var t=i.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}()):n.IN.init()},pinterest:function(e){var n=e.options.buttons.pinterest;t(e.element).find(".buttons").append('<div class="button pinterest"><a href="http://pinterest.com/pin/create/button/?url='+(""!==n.url?n.url:e.options.url)+"&media="+n.media+"&description="+n.description+'" class="pin-it-button" count-layout="'+n.layout+'">Pin It</a></div>'),function(){var e=i.createElement("script");e.type="text/javascript",e.async=!0,e.src="//assets.pinterest.com/js/pinit.js";var t=i.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}()}},d={googlePlus:function(){},facebook:function(){fb=n.setInterval((function(){"undefined"!=typeof FB&&(FB.Event.subscribe("edge.create",(function(e){_gaq.push(["_trackSocial","facebook","like",e])})),FB.Event.subscribe("edge.remove",(function(e){_gaq.push(["_trackSocial","facebook","unlike",e])})),FB.Event.subscribe("message.send",(function(e){_gaq.push(["_trackSocial","facebook","send",e])})),clearInterval(fb))}),1e3)},twitter:function(){tw=n.setInterval((function(){"undefined"!=typeof twttr&&(twttr.events.bind("tweet",(function(e){e&&_gaq.push(["_trackSocial","twitter","tweet"])})),clearInterval(tw))}),1e3)},digg:function(){},delicious:function(){},stumbleupon:function(){},linkedin:function(){},pinterest:function(){}},c={googlePlus:function(e){n.open("https://plus.google.com/share?hl="+e.buttons.googlePlus.lang+"&url="+encodeURIComponent(""!==e.buttons.googlePlus.url?e.buttons.googlePlus.url:e.url),"","toolbar=0, status=0, width=900, height=500")},facebook:function(e){n.open("http://www.facebook.com/sharer/sharer.php?u="+encodeURIComponent(""!==e.buttons.facebook.url?e.buttons.facebook.url:e.url)+"&t="+e.text,"","toolbar=0, status=0, width=900, height=500")},twitter:function(e){n.open("https://twitter.com/intent/tweet?text="+encodeURIComponent(e.text)+"&url="+encodeURIComponent(""!==e.buttons.twitter.url?e.buttons.twitter.url:e.url)+(""!==e.buttons.twitter.via?"&via="+e.buttons.twitter.via:""),"","toolbar=0, status=0, width=650, height=360")},digg:function(e){n.open("http://digg.com/tools/diggthis/submit?url="+encodeURIComponent(""!==e.buttons.digg.url?e.buttons.digg.url:e.url)+"&title="+e.text+"&related=true&style=true","","toolbar=0, status=0, width=650, height=360")},delicious:function(e){n.open("http://www.delicious.com/save?v=5&noui&jump=close&url="+encodeURIComponent(""!==e.buttons.delicious.url?e.buttons.delicious.url:e.url)+"&title="+e.text,"delicious","toolbar=no,width=550,height=550")},stumbleupon:function(e){n.open("http://www.stumbleupon.com/badge/?url="+encodeURIComponent(""!==e.buttons.delicious.url?e.buttons.delicious.url:e.url),"stumbleupon","toolbar=no,width=550,height=550")},linkedin:function(e){n.open("https://www.linkedin.com/cws/share?url="+encodeURIComponent(""!==e.buttons.delicious.url?e.buttons.delicious.url:e.url)+"&token=&isFramed=true","linkedin","toolbar=no,width=550,height=550")},pinterest:function(e){n.open("http://pinterest.com/pin/create/button/?url="+encodeURIComponent(""!==e.buttons.pinterest.url?e.buttons.pinterest.url:e.url)+"&media="+encodeURIComponent(e.buttons.pinterest.media)+"&description="+e.buttons.pinterest.description,"pinterest","toolbar=no,width=700,height=300")}};function h(e,n){this.element=e,this.options=t.extend(!0,{},a,n),this.options.share=n.share,this._defaults=a,this._name=r,this.init()}h.prototype.init=function(){var e=this;""!==this.options.urlCurl&&(l.googlePlus=this.options.urlCurl+"?url={url}&type=googlePlus",l.stumbleupon=this.options.urlCurl+"?url={url}&type=stumbleupon"),t(this.element).addClass(this.options.className),void 0!==t(this.element).data("title")&&(this.options.title=t(this.element).attr("data-title")),void 0!==t(this.element).data("url")&&(this.options.url=t(this.element).data("url")),void 0!==t(this.element).data("text")&&(this.options.text=t(this.element).data("text")),t.each(this.options.share,(function(t,n){!0===n&&e.options.shareTotal++})),!0===e.options.enableCounter?t.each(this.options.share,(function(t,n){if(!0===n)try{e.getSocialJson(t)}catch(e){}})):""!==e.options.template?this.options.render(this,this.options):this.loadButtons(),t(this.element).hover((function(){0===t(this).find(".buttons").length&&!0===e.options.enableHover&&e.loadButtons(),e.options.hover(e,e.options)}),(function(){e.options.hide(e,e.options)})),t(this.element).click((function(){return e.options.click(e,e.options),!1}))},h.prototype.loadButtons=function(){var e=this;t(this.element).append('<div class="buttons"></div>'),t.each(e.options.share,(function(t,n){1==n&&(u[t](e),!0===e.options.enableTracking&&d[t]())}))},h.prototype.getSocialJson=function(e){var n=this,i=0,o=l[e].replace("{url}",encodeURIComponent(this.options.url));!0===this.options.buttons[e].urlCount&&""!==this.options.buttons[e].url&&(o=l[e].replace("{url}",this.options.buttons[e].url)),""!=o&&""!==n.options.urlCurl?t.getJSON(o,(function(t){if(void 0!==t.count){var o=t.count+"";o=o.replace("ÃÂ ",""),i+=parseInt(o,10)}else t.data&&t.data.length>0&&void 0!==t.data[0].total_count?i+=parseInt(t.data[0].total_count,10):void 0!==t[0]?i+=parseInt(t[0].total_posts,10):t[0];n.options.count[e]=i,n.options.total+=i,n.renderer(),n.rendererPerso()})).error((function(){n.options.count[e]=0,n.rendererPerso()})):(n.renderer(),n.options.count[e]=0,n.rendererPerso())},h.prototype.rendererPerso=function(){var t=0;for(e in this.options.count)t++;t===this.options.shareTotal&&this.options.render(this,this.options)},h.prototype.renderer=function(){var e=this.options.total,n=this.options.template;!0===this.options.shorterTotal&&(e=this.shorterTotal(e)),""!==n?(n=n.replace("{total}",e),t(this.element).html(n)):t(this.element).html('<div class="box"><a class="count" href="#">'+e+"</a>"+(""!==this.options.title?'<a class="share" href="#">'+this.options.title+"</a>":"")+"</div>")},h.prototype.shorterTotal=function(e){return e>=1e6?e=(e/1e6).toFixed(2)+"M":e>=1e3&&(e=(e/1e3).toFixed(1)+"k"),e},h.prototype.openPopup=function(e){if(c[e](this.options),!0===this.options.enableTracking){var t={googlePlus:{site:"Google",action:"+1"},facebook:{site:"facebook",action:"like"},twitter:{site:"twitter",action:"tweet"},digg:{site:"digg",action:"add"},delicious:{site:"delicious",action:"add"},stumbleupon:{site:"stumbleupon",action:"add"},linkedin:{site:"linkedin",action:"share"},pinterest:{site:"pinterest",action:"pin"}};_gaq.push(["_trackSocial",t[e].site,t[e].action])}},h.prototype.simulateClick=function(){var e=t(this.element).html();t(this.element).html(e.replace(this.options.total,this.options.total+1))},h.prototype.update=function(e,t){""!==e&&(this.options.url=e),""!==t&&(this.options.text=t)},t.fn[r]=function(e){var n=arguments;return void 0===e||"object"==typeof e?this.each((function(){t.data(this,"plugin_"+r)||t.data(this,"plugin_"+r,new h(this,e))})):"string"==typeof e&&"_"!==e[0]&&"init"!==e?this.each((function(){var i=t.data(this,"plugin_"+r);i instanceof h&&"function"==typeof i[e]&&i[e].apply(i,Array.prototype.slice.call(n,1))})):void 0}}(jQuery,window,document),$.fn.nextOrFirst=function(e){var t=this.next(e);return t.length?t:this.prevAll(e).last()},$.fn.prevOrLast=function(e){var t=this.prev(e);return t.length?t:this.nextAll(e).last()},function(e,t,n){var i,o="hashchange",r=document,s=e.event.special,a=r.documentMode,l="on"+o in t&&(a===n||a>7);function u(e){return"#"+(e=e||location.href).replace(/^[^#]*#?(.*)$/,"$1")}e.fn[o]=function(e){return e?this.bind(o,e):this.trigger(o)},e.fn[o].delay=50,s[o]=e.extend(s[o],{setup:function(){if(l)return!1;e(i.start)},teardown:function(){if(l)return!1;e(i.stop)}}),i=function(){var i,r={},s=u(),a=function(e){return e},l=a,d=a;function c(){var n=u(),r=d(s);n!==s?(l(s=n,r),e(t).trigger(o)):r!==s&&(location.href=location.href.replace(/#.*/,"")+r),i=setTimeout(c,e.fn[o].delay)}return r.start=function(){i||c()},r.stop=function(){i&&clearTimeout(i),i=n},r}()}(jQuery,this),function(){var e,t,n,i,o,r;function s(e){var t={top:0,left:0};if(!e.offsetParent)return t;do{t.left+=e.offsetLeft,t.top+=e.offsetTop}while(e=e.offsetParent);return t}function a(){this._activeZoom=this._initialScrollPosition=this._initialTouchPosition=this._touchMoveListener=null,this._document=document,this._window=window,this._body=document.body}function l(e){this._fullHeight=this._fullWidth=this._overlay=this._targetImageWrap=null,this._targetImage=e,this._body=document.body}a.prototype.listen=function(){document.body.addEventListener("click",function(e){"zoom"===e.target.getAttribute("data-action")&&this._zoom(e)}.bind(this))},a.prototype._zoom=function(o){var r=o.target;if(r&&"IMG"==r.tagName&&!this._body.classList.contains("zoom-overlay-open")){if(o.metaKey||o.ctrlKey)return window.open(o.target.getAttribute("data-original")||o.target.currentSrc||o.target.src,"_blank");this._activeZoomClose(!0),this._activeZoom=new l(r),this._activeZoom.zoomImage(),e=this._scrollHandler.bind(this),t=this._clickHandler.bind(this),n=this._keyHandler.bind(this),i=this._touchStart.bind(this),this._window.addEventListener("scroll",e),this._document.addEventListener("click",t),this._document.addEventListener("keyup",n),this._document.addEventListener("touchstart",i),o.stopPropagation()}},a.prototype._activeZoomClose=function(o){this._activeZoom&&(o?this._activeZoom.dispose():this._activeZoom.close(),this._window.removeEventListener("scroll",e),this._document.removeEventListener("click",t),this._document.removeEventListener("keyup",n),this._document.removeEventListener("touchstart",i),this._activeZoom=null)},a.prototype._scrollHandler=function(e){null===this._initialScrollPosition&&(this._initialScrollPosition=window.scrollY);var t=this._initialScrollPosition-window.scrollY;Math.abs(t)>=40&&this._activeZoomClose()},a.prototype._keyHandler=function(e){27==e.keyCode&&this._activeZoomClose()},a.prototype._clickHandler=function(e){e.stopPropagation(),e.preventDefault(),this._activeZoomClose()},a.prototype._touchStart=function(e){this._initialTouchPosition=e.touches[0].pageY,o=this._touchMove.bind(this),e.target.addEventListener("touchmove",o)},a.prototype._touchMove=function(e){Math.abs(e.touches[0].pageY-this._initialTouchPosition)>10&&(this._activeZoomClose(),e.target.removeEventListener("touchmove",o))},l.OFFSET=80,l._MAX_WIDTH=2560,l._MAX_HEIGHT=4096,l.prototype.zoomImage=function(){var e=document.createElement("img");e.onload=function(){this._fullHeight=Number(e.height),this._fullWidth=Number(e.width),this._zoomOriginal()}.bind(this),e.src=this._targetImage.currentSrc||this._targetImage.src},l.prototype._zoomOriginal=function(){this._targetImageWrap=document.createElement("div"),this._targetImageWrap.className="zoom-img-wrap",this._targetImageWrap.style.position="absolute",this._targetImageWrap.style.top=s(this._targetImage).top+"px",this._targetImageWrap.style.left=s(this._targetImage).left+"px",this._targetImageClone=this._targetImage.cloneNode(),this._targetImageClone.style.visibility="hidden",this._targetImage.style.width=this._targetImage.offsetWidth+"px",this._targetImage.parentNode.replaceChild(this._targetImageClone,this._targetImage),document.body.appendChild(this._targetImageWrap),this._targetImageWrap.appendChild(this._targetImage),this._targetImage.classList.add("zoom-img"),this._targetImage.setAttribute("data-action","zoom-out"),this._overlay=document.createElement("div"),this._overlay.className="zoom-overlay",document.body.appendChild(this._overlay),this._calculateZoom(),this._triggerAnimation()},l.prototype._calculateZoom=function(){this._targetImage.offsetWidth;var e=this._fullWidth,t=this._fullHeight,n=(window.scrollY,e/this._targetImage.width),i=window.innerHeight-l.OFFSET,o=window.innerWidth-l.OFFSET,r=e/t,s=o/i;this._imgScaleFactor=e<o&&t<i?n:r<s?i/t*n:o/e*n},l.prototype._triggerAnimation=function(){this._targetImage.offsetWidth;var e=s(this._targetImage),t=window.scrollY+window.innerHeight/2,n=window.innerWidth/2,i=e.top+this._targetImage.height/2,o=e.left+this._targetImage.width/2;this._translateY=t-i,this._translateX=n-o,this._targetImage.style.webkitTransform="scale3d("+this._imgScaleFactor+","+this._imgScaleFactor+","+this._imgScaleFactor+")",this._targetImageWrap.style.webkitTransform="translate("+this._translateX+"px, "+this._translateY+"px) translateZ(0)",this._targetImage.style.msTransform="scale3d("+this._imgScaleFactor+","+this._imgScaleFactor+","+this._imgScaleFactor+")",this._targetImageWrap.style.msTransform="translate("+this._translateX+"px, "+this._translateY+"px) translateZ(0)",this._targetImage.style.transform="scale3d("+this._imgScaleFactor+","+this._imgScaleFactor+","+this._imgScaleFactor+")",this._targetImageWrap.style.transform="translate("+this._translateX+"px, "+this._translateY+"px) translateZ(0)",this._body.classList.add("zoom-overlay-open")},l.prototype.close=function(){if(this._body.classList.remove("zoom-overlay-open"),this._body.classList.add("zoom-overlay-transitioning"),this._targetImage.style.webkitTransform="",this._targetImageWrap.style.webkitTransform="",this._targetImage.style.msTransform="",this._targetImageWrap.style.msTransform="",this._targetImage.style.transform="",this._targetImageWrap.style.transform="",!1 in document.body.style)return this.dispose();r=this.dispose.bind(this),this._targetImage.addEventListener("transitionend",r),this._targetImage.addEventListener("webkitTransitionEnd",r)},l.prototype.dispose=function(){this._targetImageWrap&&this._targetImageWrap.parentNode&&(this._targetImage.classList.remove("zoom-img"),this._targetImage.setAttribute("data-action","zoom"),this._targetImageClone.parentNode.replaceChild(this._targetImage,this._targetImageClone),this._targetImageWrap.parentNode.removeChild(this._targetImageWrap),this._overlay.parentNode.removeChild(this._overlay),this._body.classList.remove("zoom-overlay-transitioning")),this._targetImage.removeEventListener("transitionend",r),this._targetImage.removeEventListener("webkitTransitionEnd",r)},$((function(){window.isMobile&&!window.enableMobileZoom||(new a).listen()}))}();var C,S=t.exports&&void 0!==i.g?i.g:this||window;(S._gsQueue||(S._gsQueue=[])).push((function(){var e=document.documentElement,t=window,n=function(n,i){var o="x"===i?"Width":"Height",r="scroll"+o,s="client"+o,a=document.body;return n===t||n===e||n===a?Math.max(e[r],a[r])-(t["inner"+o]||e[s]||a[s]):n[r]-n["offset"+o]},i=S._gsDefine.plugin({propName:"scrollTo",API:2,version:"1.7.5",init:function(e,i,o){return this._wdw=e===t,this._target=e,this._tween=o,"object"!=typeof i&&(i={y:i}),this.vars=i,this._autoKill=!1!==i.autoKill,this.x=this.xPrev=this.getX(),this.y=this.yPrev=this.getY(),null!=i.x?(this._addTween(this,"x",this.x,"max"===i.x?n(e,"x"):i.x,"scrollTo_x",!0),this._overwriteProps.push("scrollTo_x")):this.skipX=!0,null!=i.y?(this._addTween(this,"y",this.y,"max"===i.y?n(e,"y"):i.y,"scrollTo_y",!0),this._overwriteProps.push("scrollTo_y")):this.skipY=!0,!0},set:function(e){this._super.setRatio.call(this,e);var i=this._wdw||!this.skipX?this.getX():this.xPrev,o=this._wdw||!this.skipY?this.getY():this.yPrev,r=o-this.yPrev,s=i-this.xPrev;this._autoKill&&(!this.skipX&&(s>7||-7>s)&&n(this._target,"x")>i&&(this.skipX=!0),!this.skipY&&(r>7||-7>r)&&n(this._target,"y")>o&&(this.skipY=!0),this.skipX&&this.skipY&&(this._tween.kill(),this.vars.onAutoKill&&this.vars.onAutoKill.apply(this.vars.onAutoKillScope||this._tween,this.vars.onAutoKillParams||[]))),this._wdw?t.scrollTo(this.skipX?i:this.x,this.skipY?o:this.y):(this.skipY||(this._target.scrollTop=this.y),this.skipX||(this._target.scrollLeft=this.x)),this.xPrev=this.x,this.yPrev=this.y}}),o=i.prototype;i.max=n,o.getX=function(){return this._wdw?null!=t.pageXOffset?t.pageXOffset:null!=e.scrollLeft?e.scrollLeft:document.body.scrollLeft:this._target.scrollLeft},o.getY=function(){return this._wdw?null!=t.pageYOffset?t.pageYOffset:null!=e.scrollTop?e.scrollTop:document.body.scrollTop:this._target.scrollTop},o._kill=function(e){return e.scrollTo_x&&(this.skipX=!0),e.scrollTo_y&&(this.skipY=!0),this._super._kill.call(this,e)}})),S._gsDefine&&S._gsQueue.pop()(),function(e,i){var o=e.GreenSockGlobals=e.GreenSockGlobals||e;if(!o.TweenLite){var r,s,a,l,u,d=function(e){var t,n=e.split("."),i=o;for(t=0;n.length>t;t++)i[n[t]]=i=i[n[t]]||{};return i},c=d("com.greensock"),h=1e-10,p=function(e){var t,n=[],i=e.length;for(t=0;t!==i;n.push(e[t++]));return n},f=function(){},m=function(){var e=Object.prototype.toString,t=e.call([]);return function(n){return null!=n&&(n instanceof Array||"object"==typeof n&&!!n.push&&e.call(n)===t)}}(),g={},v=function(e,i,r,s){this.sc=g[e]?g[e].sc:[],g[e]=this,this.gsClass=null,this.func=r;var a=[];this.check=function(l){for(var u,c,h,p,f=i.length,m=f;--f>-1;)(u=g[i[f]]||new v(i[f],[])).gsClass?(a[f]=u.gsClass,m--):l&&u.sc.push(this);if(0===m&&r)for(h=(c=("com.greensock."+e).split(".")).pop(),p=d(c.join("."))[h]=this.gsClass=r.apply(r,a),s&&(o[h]=p,void 0!==(x=function(){return p}.apply(n,_=[]))&&(t.exports=x)),f=0;this.sc.length>f;f++)this.sc[f].check()},this.check(!0)},w=e._gsDefine=function(e,t,n,i){return new v(e,t,n,i)},y=c._class=function(e,t,n){return t=t||function(){},w(e,[],(function(){return t}),n),t};w.globals=o;var b=[0,0,1,1],T=[],C=y("easing.Ease",(function(e,t,n,i){this._func=e,this._type=n||0,this._power=i||0,this._params=t?b.concat(t):b}),!0),S=C.map={},k=C.register=function(e,t,n,i){for(var o,r,s,a,l=t.split(","),u=l.length,d=(n||"easeIn,easeOut,easeInOut").split(",");--u>-1;)for(r=l[u],o=i?y("easing."+r,null,!0):c.easing[r]||{},s=d.length;--s>-1;)a=d[s],S[r+"."+a]=S[a+r]=o[a]=e.getRatio?e:e[a]||new e};for((a=C.prototype)._calcEnd=!1,a.getRatio=function(e){if(this._func)return this._params[0]=e,this._func.apply(null,this._params);var t=this._type,n=this._power,i=1===t?1-e:2===t?e:.5>e?2*e:2*(1-e);return 1===n?i*=i:2===n?i*=i*i:3===n?i*=i*i*i:4===n&&(i*=i*i*i*i),1===t?1-i:2===t?i:.5>e?i/2:1-i/2},s=(r=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;--s>-1;)a=r[s]+",Power"+s,k(new C(null,null,1,s),a,"easeOut",!0),k(new C(null,null,2,s),a,"easeIn"+(0===s?",easeNone":"")),k(new C(null,null,3,s),a,"easeInOut");S.linear=c.easing.Linear.easeIn,S.swing=c.easing.Quad.easeInOut;var E=y("events.EventDispatcher",(function(e){this._listeners={},this._eventTarget=e||this}));(a=E.prototype).addEventListener=function(e,t,n,i,o){o=o||0;var r,s,a=this._listeners[e],d=0;for(null==a&&(this._listeners[e]=a=[]),s=a.length;--s>-1;)(r=a[s]).c===t&&r.s===n?a.splice(s,1):0===d&&o>r.pr&&(d=s+1);a.splice(d,0,{c:t,s:n,up:i,pr:o}),this!==l||u||l.wake()},a.removeEventListener=function(e,t){var n,i=this._listeners[e];if(i)for(n=i.length;--n>-1;)if(i[n].c===t)return void i.splice(n,1)},a.dispatchEvent=function(e){var t,n,i,o=this._listeners[e];if(o)for(t=o.length,n=this._eventTarget;--t>-1;)(i=o[t])&&(i.up?i.c.call(i.s||n,{type:e,target:n}):i.c.call(i.s||n))};var P=e.requestAnimationFrame,$=e.cancelAnimationFrame,A=Date.now||function(){return(new Date).getTime()},I=A();for(s=(r=["ms","moz","webkit","o"]).length;--s>-1&&!P;)P=e[r[s]+"RequestAnimationFrame"],$=e[r[s]+"CancelAnimationFrame"]||e[r[s]+"CancelRequestAnimationFrame"];y("Ticker",(function(e,t){var n,i,o,r,s,a=this,d=A(),c=!1!==t&&P,p=500,m=33,g=function(e){var t,l,u=A()-I;u>p&&(d+=u-m),I+=u,a.time=(I-d)/1e3,t=a.time-s,(!n||t>0||!0===e)&&(a.frame++,s+=t+(t>=r?.004:r-t),l=!0),!0!==e&&(o=i(g)),l&&a.dispatchEvent("tick")};E.call(a),a.time=a.frame=0,a.tick=function(){g(!0)},a.lagSmoothing=function(e,t){p=e||1/h,m=Math.min(t,p,0)},a.sleep=function(){null!=o&&(c&&$?$(o):clearTimeout(o),i=f,o=null,a===l&&(u=!1))},a.wake=function(){null!==o?a.sleep():a.frame>10&&(I=A()-p+5),i=0===n?f:c&&P?P:function(e){return setTimeout(e,0|1e3*(s-a.time)+1)},a===l&&(u=!0),g(2)},a.fps=function(e){return arguments.length?(r=1/((n=e)||60),s=this.time+r,void a.wake()):n},a.useRAF=function(e){return arguments.length?(a.sleep(),c=e,void a.fps(n)):c},a.fps(e),setTimeout((function(){c&&5>a.frame&&a.useRAF(!1)}),1500)})),(a=c.Ticker.prototype=new c.events.EventDispatcher).constructor=c.Ticker;var D=y("core.Animation",(function(e,t){if(this.vars=t=t||{},this._duration=this._totalDuration=e||0,this._delay=Number(t.delay)||0,this._timeScale=1,this._active=!0===t.immediateRender,this.data=t.data,this._reversed=!0===t.reversed,X){u||l.wake();var n=this.vars.useFrames?U:X;n.add(this,n._time),this.vars.paused&&this.paused(!0)}}));l=D.ticker=new c.Ticker,(a=D.prototype)._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var O=function(){u&&A()-I>2e3&&l.wake(),setTimeout(O,2e3)};O(),a.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},a.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},a.resume=function(e,t){return null!=e&&this.seek(e,t),this.paused(!1)},a.seek=function(e,t){return this.totalTime(Number(e),!1!==t)},a.restart=function(e,t){return this.reversed(!1).paused(!1).totalTime(e?-this._delay:0,!1!==t,!0)},a.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},a.render=function(){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,(this._gc||!this.timeline)&&this._enabled(!0),this},a.isActive=function(){var e,t=this._timeline,n=this._startTime;return!t||!this._gc&&!this._paused&&t.isActive()&&(e=t.rawTime())>=n&&n+this.totalDuration()/this._timeScale>e},a._enabled=function(e,t){return u||l.wake(),this._gc=!e,this._active=this.isActive(),!0!==t&&(e&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!e&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(){return this._enabled(!1,!1)},a.kill=function(e,t){return this._kill(e,t),this},a._uncache=function(e){for(var t=e?this:this.timeline;t;)t._dirty=!0,t=t.timeline;return this},a._swapSelfInParams=function(e){for(var t=e.length,n=e.concat();--t>-1;)"{self}"===e[t]&&(n[t]=this);return n},a._callback=function(e){var t=this.vars;t[e].apply(t[e+"Scope"]||t.callbackScope||this,t[e+"Params"]||T)},a.eventCallback=function(e,t,n,i){if("on"===(e||"").substr(0,2)){var o=this.vars;if(1===arguments.length)return o[e];null==t?delete o[e]:(o[e]=t,o[e+"Params"]=m(n)&&-1!==n.join("").indexOf("{self}")?this._swapSelfInParams(n):n,o[e+"Scope"]=i),"onUpdate"===e&&(this._onUpdate=t)}return this},a.delay=function(e){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+e-this._delay),this._delay=e,this):this._delay},a.duration=function(e){return arguments.length?(this._duration=this._totalDuration=e,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==e&&this.totalTime(this._totalTime*(e/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(e){return this._dirty=!1,arguments.length?this.duration(e):this._totalDuration},a.time=function(e,t){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(e>this._duration?this._duration:e,t)):this._time},a.totalTime=function(e,t,n){if(u||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(0>e&&!n&&(e+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var i=this._totalDuration,o=this._timeline;if(e>i&&!n&&(e=i),this._startTime=(this._paused?this._pauseTime:o._time)-(this._reversed?i-e:e)/this._timeScale,o._dirty||this._uncache(!1),o._timeline)for(;o._timeline;)o._timeline._time!==(o._startTime+o._totalTime)/o._timeScale&&o.totalTime(o._totalTime,!0),o=o._timeline}this._gc&&this._enabled(!0,!1),(this._totalTime!==e||0===this._duration)&&(this.render(e,t,!1),N.length&&Q())}return this},a.progress=a.totalProgress=function(e,t){return arguments.length?this.totalTime(this.duration()*e,t):this._time/this.duration()},a.startTime=function(e){return arguments.length?(e!==this._startTime&&(this._startTime=e,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,e-this._delay)),this):this._startTime},a.endTime=function(e){return this._startTime+(0!=e?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(e){if(!arguments.length)return this._timeScale;if(e=e||h,this._timeline&&this._timeline.smoothChildTiming){var t=this._pauseTime,n=t||0===t?t:this._timeline.totalTime();this._startTime=n-(n-this._startTime)*this._timeScale/e}return this._timeScale=e,this._uncache(!1)},a.reversed=function(e){return arguments.length?(e!=this._reversed&&(this._reversed=e,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(e){if(!arguments.length)return this._paused;var t,n,i=this._timeline;return e!=this._paused&&i&&(u||e||l.wake(),n=(t=i.rawTime())-this._pauseTime,!e&&i.smoothChildTiming&&(this._startTime+=n,this._uncache(!1)),this._pauseTime=e?t:null,this._paused=e,this._active=this.isActive(),!e&&0!==n&&this._initted&&this.duration()&&this.render(i.smoothChildTiming?this._totalTime:(t-this._startTime)/this._timeScale,!0,!0)),this._gc&&!e&&this._enabled(!0,!1),this};var L=y("core.SimpleTimeline",(function(e){D.call(this,0,e),this.autoRemoveChildren=this.smoothChildTiming=!0}));(a=L.prototype=new D).constructor=L,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(e,t){var n,i;if(e._startTime=Number(t||0)+e._delay,e._paused&&this!==e._timeline&&(e._pauseTime=e._startTime+(this.rawTime()-e._startTime)/e._timeScale),e.timeline&&e.timeline._remove(e,!0),e.timeline=e._timeline=this,e._gc&&e._enabled(!0,!0),n=this._last,this._sortChildren)for(i=e._startTime;n&&n._startTime>i;)n=n._prev;return n?(e._next=n._next,n._next=e):(e._next=this._first,this._first=e),e._next?e._next._prev=e:this._last=e,e._prev=n,this._recent=e,this._timeline&&this._uncache(!0),this},a._remove=function(e,t){return e.timeline===this&&(t||e._enabled(!1,!0),e._prev?e._prev._next=e._next:this._first===e&&(this._first=e._next),e._next?e._next._prev=e._prev:this._last===e&&(this._last=e._prev),e._next=e._prev=e.timeline=null,e===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(e,t,n){var i,o=this._first;for(this._totalTime=this._time=this._rawPrevTime=e;o;)i=o._next,(o._active||e>=o._startTime&&!o._paused)&&(o._reversed?o.render((o._dirty?o.totalDuration():o._totalDuration)-(e-o._startTime)*o._timeScale,t,n):o.render((e-o._startTime)*o._timeScale,t,n)),o=i},a.rawTime=function(){return u||l.wake(),this._totalTime};var j=y("TweenLite",(function(t,n,i){if(D.call(this,n,i),this.render=j.prototype.render,null==t)throw"Cannot tween a null target.";this.target=t="string"!=typeof t?t:j.selector(t)||t;var o,r,s,a=t.jquery||t.length&&t!==e&&t[0]&&(t[0]===e||t[0].nodeType&&t[0].style&&!t.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?B[j.defaultOverwrite]:"number"==typeof l?l>>0:B[l],(a||t instanceof Array||t.push&&m(t))&&"number"!=typeof t[0])for(this._targets=s=p(t),this._propLookup=[],this._siblings=[],o=0;s.length>o;o++)(r=s[o])?"string"!=typeof r?r.length&&r!==e&&r[0]&&(r[0]===e||r[0].nodeType&&r[0].style&&!r.nodeType)?(s.splice(o--,1),this._targets=s=s.concat(p(r))):(this._siblings[o]=G(r,this,!1),1===l&&this._siblings[o].length>1&&Z(r,this,null,1,this._siblings[o])):"string"==typeof(r=s[o--]=j.selector(r))&&s.splice(o+1,1):s.splice(o--,1);else this._propLookup={},this._siblings=G(t,this,!1),1===l&&this._siblings.length>1&&Z(t,this,null,1,this._siblings);(this.vars.immediateRender||0===n&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-h,this.render(-this._delay))}),!0),M=function(t){return t&&t.length&&t!==e&&t[0]&&(t[0]===e||t[0].nodeType&&t[0].style&&!t.nodeType)};(a=j.prototype=new D).constructor=j,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,j.version="1.17.0",j.defaultEase=a._ease=new C(null,null,1,1),j.defaultOverwrite="auto",j.ticker=l,j.autoSleep=120,j.lagSmoothing=function(e,t){l.lagSmoothing(e,t)},j.selector=e.$||e.jQuery||function(t){var n=e.$||e.jQuery;return n?(j.selector=n,n(t)):"undefined"==typeof document?t:document.querySelectorAll?document.querySelectorAll(t):document.getElementById("#"===t.charAt(0)?t.substr(1):t)};var N=[],R={},z=j._internals={isArray:m,isSelector:M,lazyTweens:N},H=j._plugins={},W=z.tweenLookup={},q=0,F=z.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1},B={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},U=D._rootFramesTimeline=new L,X=D._rootTimeline=new L,Y=30,Q=z.lazyRender=function(){var e,t=N.length;for(R={};--t>-1;)(e=N[t])&&!1!==e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0),e._lazy=!1);N.length=0};X._startTime=l.time,U._startTime=l.frame,X._active=U._active=!0,setTimeout(Q,1),D._updateRoot=j.render=function(){var e,t,n;if(N.length&&Q(),X.render((l.time-X._startTime)*X._timeScale,!1,!1),U.render((l.frame-U._startTime)*U._timeScale,!1,!1),N.length&&Q(),l.frame>=Y){for(n in Y=l.frame+(parseInt(j.autoSleep,10)||120),W){for(e=(t=W[n].tweens).length;--e>-1;)t[e]._gc&&t.splice(e,1);0===t.length&&delete W[n]}if((!(n=X._first)||n._paused)&&j.autoSleep&&!U._first&&1===l._listeners.tick.length){for(;n&&n._paused;)n=n._next;n||l.sleep()}}},l.addEventListener("tick",D._updateRoot);var G=function(e,t,n){var i,o,r=e._gsTweenID;if(W[r||(e._gsTweenID=r="t"+q++)]||(W[r]={target:e,tweens:[]}),t&&((i=W[r].tweens)[o=i.length]=t,n))for(;--o>-1;)i[o]===t&&i.splice(o,1);return W[r].tweens},V=function(e,t,n,i){var o,r,s=e.vars.onOverwrite;return s&&(o=s(e,t,n,i)),(s=j.onOverwrite)&&(r=s(e,t,n,i)),!1!==o&&!1!==r},Z=function(e,t,n,i,o){var r,s,a,l;if(1===i||i>=4){for(l=o.length,r=0;l>r;r++)if((a=o[r])!==t)a._gc||a._kill(null,e,t)&&(s=!0);else if(5===i)break;return s}var u,d=t._startTime+h,c=[],p=0,f=0===t._duration;for(r=o.length;--r>-1;)(a=o[r])===t||a._gc||a._paused||(a._timeline!==t._timeline?(u=u||K(t,0,f),0===K(a,u,f)&&(c[p++]=a)):d>=a._startTime&&a._startTime+a.totalDuration()/a._timeScale>d&&((f||!a._initted)&&2e-10>=d-a._startTime||(c[p++]=a)));for(r=p;--r>-1;)if(a=c[r],2===i&&a._kill(n,e,t)&&(s=!0),2!==i||!a._firstPT&&a._initted){if(2!==i&&!V(a,t))continue;a._enabled(!1,!1)&&(s=!0)}return s},K=function(e,t,n){for(var i=e._timeline,o=i._timeScale,r=e._startTime;i._timeline;){if(r+=i._startTime,o*=i._timeScale,i._paused)return-100;i=i._timeline}return(r/=o)>t?r-t:n&&r===t||!e._initted&&2*h>r-t?h:(r+=e.totalDuration()/e._timeScale/o)>t+h?0:r-t-h};a._init=function(){var e,t,n,i,o,r=this.vars,s=this._overwrittenProps,a=this._duration,l=!!r.immediateRender,u=r.ease;if(r.startAt){for(i in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),o={},r.startAt)o[i]=r.startAt[i];if(o.overwrite=!1,o.immediateRender=!0,o.lazy=l&&!1!==r.lazy,o.startAt=o.delay=null,this._startAt=j.to(this.target,0,o),l)if(this._time>0)this._startAt=null;else if(0!==a)return}else if(r.runBackwards&&0!==a)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(i in 0!==this._time&&(l=!1),n={},r)F[i]&&"autoCSS"!==i||(n[i]=r[i]);if(n.overwrite=0,n.data="isFromStart",n.lazy=l&&!1!==r.lazy,n.immediateRender=l,this._startAt=j.to(this.target,0,n),l){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof C?u:"function"==typeof u?new C(u,r.easeParams):S[u]||j.defaultEase:j.defaultEase,r.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,r.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(e=this._targets.length;--e>-1;)this._initProps(this._targets[e],this._propLookup[e]={},this._siblings[e],s?s[e]:null)&&(t=!0);else t=this._initProps(this.target,this._propLookup,this._siblings,s);if(t&&j._onPluginEvent("_onInitAllProps",this),s&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),r.runBackwards)for(n=this._firstPT;n;)n.s+=n.c,n.c=-n.c,n=n._next;this._onUpdate=r.onUpdate,this._initted=!0},a._initProps=function(t,n,i,o){var r,s,a,l,u,d;if(null==t)return!1;for(r in R[t._gsTweenID]&&Q(),this.vars.css||t.style&&t!==e&&t.nodeType&&H.css&&!1!==this.vars.autoCSS&&function(e,t){var n,i={};for(n in e)F[n]||n in t&&"transform"!==n&&"x"!==n&&"y"!==n&&"width"!==n&&"height"!==n&&"className"!==n&&"border"!==n||!(!H[n]||H[n]&&H[n]._autoCSS)||(i[n]=e[n],delete e[n]);e.css=i}(this.vars,t),this.vars){if(d=this.vars[r],F[r])d&&(d instanceof Array||d.push&&m(d))&&-1!==d.join("").indexOf("{self}")&&(this.vars[r]=d=this._swapSelfInParams(d,this));else if(H[r]&&(l=new H[r])._onInitTween(t,this.vars[r],this)){for(this._firstPT=u={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:!0,n:r,pg:!0,pr:l._priority},s=l._overwriteProps.length;--s>-1;)n[l._overwriteProps[s]]=this._firstPT;(l._priority||l._onInitAllProps)&&(a=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0)}else this._firstPT=n[r]=u={_next:this._firstPT,t,p:r,f:"function"==typeof t[r],n:r,pg:!1,pr:0},u.s=u.f?t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]():parseFloat(t[r]),u.c="string"==typeof d&&"="===d.charAt(1)?parseInt(d.charAt(0)+"1",10)*Number(d.substr(2)):Number(d)-u.s||0;u&&u._next&&(u._next._prev=u)}return o&&this._kill(o,t)?this._initProps(t,n,i,o):this._overwrite>1&&this._firstPT&&i.length>1&&Z(t,this,n,this._overwrite,i)?(this._kill(n,t),this._initProps(t,n,i,o)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(R[t._gsTweenID]=!0),a)},a.render=function(e,t,n){var i,o,r,s,a=this._time,l=this._duration,u=this._rawPrevTime;if(e>=l)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(i=!0,o="onComplete",n=n||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||n)&&(this._startTime===this._timeline._duration&&(e=0),(0===e||0>u||u===h&&"isPause"!==this.data)&&u!==e&&(n=!0,u>h&&(o="onReverseComplete")),this._rawPrevTime=s=!t||e||u===e?e:h);else if(1e-7>e)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&u>0)&&(o="onReverseComplete",i=this._reversed),0>e&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||n)&&(u>=0&&(u!==h||"isPause"!==this.data)&&(n=!0),this._rawPrevTime=s=!t||e||u===e?e:h)),this._initted||(n=!0);else if(this._totalTime=this._time=e,this._easeType){var d=e/l,c=this._easeType,p=this._easePower;(1===c||3===c&&d>=.5)&&(d=1-d),3===c&&(d*=2),1===p?d*=d:2===p?d*=d*d:3===p?d*=d*d*d:4===p&&(d*=d*d*d*d),this.ratio=1===c?1-d:2===c?d:.5>e/l?d/2:1-d/2}else this.ratio=this._ease.getRatio(e/l);if(this._time!==a||n){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!n&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=u,N.push(this),void(this._lazy=[e,t]);this._time&&!i?this.ratio=this._ease.getRatio(this._time/l):i&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&e>=0&&(this._active=!0),0===a&&(this._startAt&&(e>=0?this._startAt.render(e,t,n):o||(o="_dummyGS")),this.vars.onStart&&(0!==this._time||0===l)&&(t||this._callback("onStart"))),r=this._firstPT;r;)r.f?r.t[r.p](r.c*this.ratio+r.s):r.t[r.p]=r.c*this.ratio+r.s,r=r._next;this._onUpdate&&(0>e&&this._startAt&&-1e-4!==e&&this._startAt.render(e,t,n),t||(this._time!==a||i)&&this._callback("onUpdate")),o&&(!this._gc||n)&&(0>e&&this._startAt&&!this._onUpdate&&-1e-4!==e&&this._startAt.render(e,t,n),i&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!t&&this.vars[o]&&this._callback(o),0===l&&this._rawPrevTime===h&&s!==h&&(this._rawPrevTime=0))}},a._kill=function(e,t,n){if("all"===e&&(e=null),null==e&&(null==t||t===this.target))return this._lazy=!1,this._enabled(!1,!1);t="string"!=typeof t?t||this._targets||this.target:j.selector(t)||t;var i,o,r,s,a,l,u,d,c,h=n&&this._time&&n._startTime===this._startTime&&this._timeline===n._timeline;if((m(t)||M(t))&&"number"!=typeof t[0])for(i=t.length;--i>-1;)this._kill(e,t[i],n)&&(l=!0);else{if(this._targets){for(i=this._targets.length;--i>-1;)if(t===this._targets[i]){a=this._propLookup[i]||{},this._overwrittenProps=this._overwrittenProps||[],o=this._overwrittenProps[i]=e?this._overwrittenProps[i]||{}:"all";break}}else{if(t!==this.target)return!1;a=this._propLookup,o=this._overwrittenProps=e?this._overwrittenProps||{}:"all"}if(a){if(u=e||a,d=e!==o&&"all"!==o&&e!==a&&("object"!=typeof e||!e._tempKill),n&&(j.onOverwrite||this.vars.onOverwrite)){for(r in u)a[r]&&(c||(c=[]),c.push(r));if((c||!e)&&!V(this,n,t,c))return!1}for(r in u)(s=a[r])&&(h&&(s.f?s.t[s.p](s.s):s.t[s.p]=s.s,l=!0),s.pg&&s.t._kill(u)&&(l=!0),s.pg&&0!==s.t._overwriteProps.length||(s._prev?s._prev._next=s._next:s===this._firstPT&&(this._firstPT=s._next),s._next&&(s._next._prev=s._prev),s._next=s._prev=null),delete a[r]),d&&(o[r]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&j._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],D.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-h,this.render(-this._delay)),this},a._enabled=function(e,t){if(u||l.wake(),e&&this._gc){var n,i=this._targets;if(i)for(n=i.length;--n>-1;)this._siblings[n]=G(i[n],this,!0);else this._siblings=G(this.target,this,!0)}return D.prototype._enabled.call(this,e,t),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&j._onPluginEvent(e?"_onEnable":"_onDisable",this)},j.to=function(e,t,n){return new j(e,t,n)},j.from=function(e,t,n){return n.runBackwards=!0,n.immediateRender=0!=n.immediateRender,new j(e,t,n)},j.fromTo=function(e,t,n,i){return i.startAt=n,i.immediateRender=0!=i.immediateRender&&0!=n.immediateRender,new j(e,t,i)},j.delayedCall=function(e,t,n,i,o){return new j(t,0,{delay:e,onComplete:t,onCompleteParams:n,callbackScope:i,onReverseComplete:t,onReverseCompleteParams:n,immediateRender:!1,lazy:!1,useFrames:o,overwrite:0})},j.set=function(e,t){return new j(e,0,t)},j.getTweensOf=function(e,t){if(null==e)return[];var n,i,o,r;if(e="string"!=typeof e?e:j.selector(e)||e,(m(e)||M(e))&&"number"!=typeof e[0]){for(n=e.length,i=[];--n>-1;)i=i.concat(j.getTweensOf(e[n],t));for(n=i.length;--n>-1;)for(r=i[n],o=n;--o>-1;)r===i[o]&&i.splice(n,1)}else for(n=(i=G(e).concat()).length;--n>-1;)(i[n]._gc||t&&!i[n].isActive())&&i.splice(n,1);return i},j.killTweensOf=j.killDelayedCallsTo=function(e,t,n){"object"==typeof t&&(n=t,t=!1);for(var i=j.getTweensOf(e,t),o=i.length;--o>-1;)i[o]._kill(n,e)};var J=y("plugins.TweenPlugin",(function(e,t){this._overwriteProps=(e||"").split(","),this._propName=this._overwriteProps[0],this._priority=t||0,this._super=J.prototype}),!0);if(a=J.prototype,J.version="1.10.1",J.API=2,a._firstPT=null,a._addTween=function(e,t,n,i,o,r){var s,a;return null!=i&&(s="number"==typeof i||"="!==i.charAt(1)?Number(i)-Number(n):parseInt(i.charAt(0)+"1",10)*Number(i.substr(2)))?(this._firstPT=a={_next:this._firstPT,t:e,p:t,s:n,c:s,f:"function"==typeof e[t],n:o||t,r},a._next&&(a._next._prev=a),a):void 0},a.setRatio=function(e){for(var t,n=this._firstPT,i=1e-6;n;)t=n.c*e+n.s,n.r?t=Math.round(t):i>t&&t>-i&&(t=0),n.f?n.t[n.p](t):n.t[n.p]=t,n=n._next},a._kill=function(e){var t,n=this._overwriteProps,i=this._firstPT;if(null!=e[this._propName])this._overwriteProps=[];else for(t=n.length;--t>-1;)null!=e[n[t]]&&n.splice(t,1);for(;i;)null!=e[i.n]&&(i._next&&(i._next._prev=i._prev),i._prev?(i._prev._next=i._next,i._prev=null):this._firstPT===i&&(this._firstPT=i._next)),i=i._next;return!1},a._roundProps=function(e,t){for(var n=this._firstPT;n;)(e[this._propName]||null!=n.n&&e[n.n.split(this._propName+"_").join("")])&&(n.r=t),n=n._next},j._onPluginEvent=function(e,t){var n,i,o,r,s,a=t._firstPT;if("_onInitAllProps"===e){for(;a;){for(s=a._next,i=o;i&&i.pr>a.pr;)i=i._next;(a._prev=i?i._prev:r)?a._prev._next=a:o=a,(a._next=i)?i._prev=a:r=a,a=s}a=t._firstPT=o}for(;a;)a.pg&&"function"==typeof a.t[e]&&a.t[e]()&&(n=!0),a=a._next;return n},J.activate=function(e){for(var t=e.length;--t>-1;)e[t].API===J.API&&(H[(new e[t])._propName]=e[t]);return!0},w.plugin=function(e){if(!(e&&e.propName&&e.init&&e.API))throw"illegal plugin definition.";var t,n=e.propName,i=e.priority||0,o=e.overwriteProps,r={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_roundProps",initAll:"_onInitAllProps"},s=y("plugins."+n.charAt(0).toUpperCase()+n.substr(1)+"Plugin",(function(){J.call(this,n,i),this._overwriteProps=o||[]}),!0===e.global),a=s.prototype=new J(n);for(t in a.constructor=s,s.API=e.API,r)"function"==typeof e[t]&&(a[r[t]]=e[t]);return s.version=e.version,J.activate([s]),s},r=e._gsQueue){for(s=0;r.length>s;s++)r[s]();for(a in g)g[a].func||e.console.log("GSAP encountered missing dependency: com.greensock."+a)}u=!1}}(t.exports&&void 0!==i.g?i.g:this||window),function(e,t){e.addEventListener("DOMContentLoaded",(function(){var n=t.location.href.replace(t.location.hash,"");[].slice.call(e.querySelectorAll("use[*|href]")).filter((function(e){return 0===e.getAttribute("xlink:href").indexOf("#")})).forEach((function(e){e.setAttribute("xlink:href",n.replace("#","")+e.getAttribute("xlink:href"))}))}),!1)}(document,window),C=window,_=[i(755)],x=function(e){return function(e,t){function n(n,r,a){(a=a||t||e.jQuery)&&(r.prototype.option||(r.prototype.option=function(e){a.isPlainObject(e)&&(this.options=a.extend(!0,this.options,e))}),a.fn[n]=function(e){return"string"==typeof e?function(e,t,i){var o,r="$()."+n+'("'+t+'")';return e.each((function(e,l){var u=a.data(l,n);if(u){var d=u[t];if(d&&"_"!=t.charAt(0)){var c=d.apply(u,i);o=void 0===o?c:o}else s(r+" is not a valid method")}else s(n+" not initialized. Cannot call methods, i.e. "+r)})),void 0!==o?o:e}(this,e,o.call(arguments,1)):(function(e,t){e.each((function(e,i){var o=a.data(i,n);o?(o.option(t),o._init()):(o=new r(i,t),a.data(i,n,o))}))}(this,e),this)},i(a))}function i(e){!e||e&&e.bridget||(e.bridget=n)}var o=Array.prototype.slice,r=e.console,s=void 0===r?function(){}:function(e){r.error(e)};return i(t||e.jQuery),n}(C,e)}.apply(n,_),void 0===x||(t.exports=x),"undefined"!=typeof window&&window,r=function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var n=this._events=this._events||{},i=n[e]=n[e]||[];return-1==i.indexOf(t)&&i.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var n=this._onceEvents=this._onceEvents||{};return(n[e]=n[e]||{})[t]=!0,this}},t.off=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var i=n.indexOf(t);return-1!=i&&n.splice(i,1),this}},t.emitEvent=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){n=n.slice(0),t=t||[];for(var i=this._onceEvents&&this._onceEvents[e],o=0;o<n.length;o++){var r=n[o];i&&i[r]&&(this.off(e,r),delete i[r]),r.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e},o=r.call((a={id:"ev-emitter/ev-emitter",exports:{},loaded:!1}).exports,i,a.exports,a),a.loaded=!0,void 0===o&&(o=a.exports),window,l=function(){return function(){function e(e){var t=parseFloat(e);return-1==e.indexOf("%")&&!isNaN(t)&&t}function t(e){var t=getComputedStyle(e);return t||r("Style returned "+t+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),t}function n(){if(!l){l=!0;var n=document.createElement("div");n.style.width="200px",n.style.padding="1px 2px 3px 4px",n.style.borderStyle="solid",n.style.borderWidth="1px 2px 3px 4px",n.style.boxSizing="border-box";var r=document.body||document.documentElement;r.appendChild(n);var s=t(n);i.isBoxSizeOuter=o=200==e(s.width),r.removeChild(n)}}function i(i){if(n(),"string"==typeof i&&(i=document.querySelector(i)),i&&"object"==typeof i&&i.nodeType){var r=t(i);if("none"==r.display)return function(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0;a>t;t++)e[s[t]]=0;return e}();var l={};l.width=i.offsetWidth,l.height=i.offsetHeight;for(var u=l.isBorderBox="border-box"==r.boxSizing,d=0;a>d;d++){var c=s[d],h=r[c],p=parseFloat(h);l[c]=isNaN(p)?0:p}var f=l.paddingLeft+l.paddingRight,m=l.paddingTop+l.paddingBottom,g=l.marginLeft+l.marginRight,v=l.marginTop+l.marginBottom,w=l.borderLeftWidth+l.borderRightWidth,y=l.borderTopWidth+l.borderBottomWidth,b=u&&o,_=e(r.width);!1!==_&&(l.width=_+(b?0:f+w));var x=e(r.height);return!1!==x&&(l.height=x+(b?0:m+y)),l.innerWidth=l.width-(f+w),l.innerHeight=l.height-(m+y),l.outerWidth=l.width+g,l.outerHeight=l.height+v,l}}var o,r="undefined"==typeof console?function(){}:function(e){console.error(e)},s=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],a=s.length,l=!1;return i}()}.apply(u={},_=[]),void 0!==l||(l=u),window,c=function(){var e=function(){var e=window.Element.prototype;if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],n=0;n<t.length;n++){var i=t[n]+"MatchesSelector";if(e[i])return i}}();return function(t,n){return t[e](n)}},d=c.call((h={id:"desandro-matches-selector/matches-selector",exports:{},loaded:!1}).exports,i,h.exports,h),h.loaded=!0,void 0===d&&(d=h.exports),function(e,t){p=function(t){return function(e,t){var n={extend:function(e,t){for(var n in t)e[n]=t[n];return e},modulo:function(e,t){return(e%t+t)%t},makeArray:function(e){var t=[];if(Array.isArray(e))t=e;else if(e&&"object"==typeof e&&"number"==typeof e.length)for(var n=0;n<e.length;n++)t.push(e[n]);else t.push(e);return t},removeFrom:function(e,t){var n=e.indexOf(t);-1!=n&&e.splice(n,1)},getParent:function(e,n){for(;e.parentNode&&e!=document.body;)if(e=e.parentNode,t(e,n))return e},getQueryElement:function(e){return"string"==typeof e?document.querySelector(e):e},handleEvent:function(e){var t="on"+e.type;this[t]&&this[t](e)},filterFindElements:function(e,i){e=n.makeArray(e);var o=[];return e.forEach((function(e){if(e instanceof HTMLElement){if(!i)return void o.push(e);t(e,i)&&o.push(e);for(var n=e.querySelectorAll(i),r=0;r<n.length;r++)o.push(n[r])}})),o},debounceMethod:function(e,t,n){var i=e.prototype[t],o=t+"Timeout";e.prototype[t]=function(){var e=this[o];e&&clearTimeout(e);var t=arguments,r=this;this[o]=setTimeout((function(){i.apply(r,t),delete r[o]}),n||100)}},docReady:function(e){var t=document.readyState;"complete"==t||"interactive"==t?setTimeout(e):document.addEventListener("DOMContentLoaded",e)},toDashed:function(e){return e.replace(/(.)([A-Z])/g,(function(e,t,n){return t+"-"+n})).toLowerCase()}},i=e.console;return n.htmlInit=function(t,o){n.docReady((function(){var r=n.toDashed(o),s="data-"+r,a=document.querySelectorAll("["+s+"]"),l=document.querySelectorAll(".js-"+r),u=n.makeArray(a).concat(n.makeArray(l)),d=s+"-options",c=e.jQuery;u.forEach((function(e){var n,r=e.getAttribute(s)||e.getAttribute(d);try{n=r&&JSON.parse(r)}catch(t){return void(i&&i.error("Error parsing "+s+" on "+e.className+": "+t))}var a=new t(e,n);c&&c.data(e,o,a)}))}))},n}(e,t)}.apply(f={},_=[d]),void 0!==p||(p=f)}(window),window,m=function(e,t){function n(e,t){e&&(this.element=e,this.layout=t,this.position={x:0,y:0},this._create())}var i=document.documentElement.style,o="string"==typeof i.transition?"transition":"WebkitTransition",r="string"==typeof i.transform?"transform":"WebkitTransform",s={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[o],a={transform:r,transition:o,transitionDuration:o+"Duration",transitionProperty:o+"Property",transitionDelay:o+"Delay"},l=n.prototype=Object.create(e.prototype);l.constructor=n,l._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},l.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},l.getSize=function(){this.size=t(this.element)},l.css=function(e){var t=this.element.style;for(var n in e)t[a[n]||n]=e[n]},l.getPosition=function(){var e=getComputedStyle(this.element),t=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),i=e[t?"left":"right"],o=e[n?"top":"bottom"],r=this.layout.size,s=-1!=i.indexOf("%")?parseFloat(i)/100*r.width:parseInt(i,10),a=-1!=o.indexOf("%")?parseFloat(o)/100*r.height:parseInt(o,10);s=isNaN(s)?0:s,a=isNaN(a)?0:a,s-=t?r.paddingLeft:r.paddingRight,a-=n?r.paddingTop:r.paddingBottom,this.position.x=s,this.position.y=a},l.layoutPosition=function(){var e=this.layout.size,t={},n=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),o=n?"paddingLeft":"paddingRight",r=n?"left":"right",s=n?"right":"left",a=this.position.x+e[o];t[r]=this.getXValue(a),t[s]="";var l=i?"paddingTop":"paddingBottom",u=i?"top":"bottom",d=i?"bottom":"top",c=this.position.y+e[l];t[u]=this.getYValue(c),t[d]="",this.css(t),this.emitEvent("layout",[this])},l.getXValue=function(e){var t=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!t?e/this.layout.size.width*100+"%":e+"px"},l.getYValue=function(e){var t=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&t?e/this.layout.size.height*100+"%":e+"px"},l._transitionTo=function(e,t){this.getPosition();var n=this.position.x,i=this.position.y,o=parseInt(e,10),r=parseInt(t,10),s=o===this.position.x&&r===this.position.y;if(this.setPosition(e,t),!s||this.isTransitioning){var a=e-n,l=t-i,u={};u.transform=this.getTranslate(a,l),this.transition({to:u,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},l.getTranslate=function(e,t){return"translate3d("+(e=this.layout._getOption("originLeft")?e:-e)+"px, "+(t=this.layout._getOption("originTop")?t:-t)+"px, 0)"},l.goTo=function(e,t){this.setPosition(e,t),this.layoutPosition()},l.moveTo=l._transitionTo,l.setPosition=function(e,t){this.position.x=parseInt(e,10),this.position.y=parseInt(t,10)},l._nonTransition=function(e){for(var t in this.css(e.to),e.isCleaning&&this._removeStyles(e.to),e.onTransitionEnd)e.onTransitionEnd[t].call(this)},l.transition=function(e){if(parseFloat(this.layout.options.transitionDuration)){var t=this._transn;for(var n in e.onTransitionEnd)t.onEnd[n]=e.onTransitionEnd[n];for(n in e.to)t.ingProperties[n]=!0,e.isCleaning&&(t.clean[n]=!0);e.from&&(this.css(e.from),this.element.offsetHeight),this.enableTransition(e.to),this.css(e.to),this.isTransitioning=!0}else this._nonTransition(e)};var u="opacity,"+function(e){return e.replace(/([A-Z])/g,(function(e){return"-"+e.toLowerCase()}))}(r);l.enableTransition=function(){if(!this.isTransitioning){var e=this.layout.options.transitionDuration;e="number"==typeof e?e+"ms":e,this.css({transitionProperty:u,transitionDuration:e,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(s,this,!1)}},l.onwebkitTransitionEnd=function(e){this.ontransitionend(e)},l.onotransitionend=function(e){this.ontransitionend(e)};var d={"-webkit-transform":"transform"};l.ontransitionend=function(e){if(e.target===this.element){var t=this._transn,n=d[e.propertyName]||e.propertyName;delete t.ingProperties[n],function(e){for(var t in e)return!1;return!0}(t.ingProperties)&&this.disableTransition(),n in t.clean&&(this.element.style[e.propertyName]="",delete t.clean[n]),n in t.onEnd&&(t.onEnd[n].call(this),delete t.onEnd[n]),this.emitEvent("transitionEnd",[this])}},l.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(s,this,!1),this.isTransitioning=!1},l._removeStyles=function(e){var t={};for(var n in e)t[n]="";this.css(t)};var c={transitionProperty:"",transitionDuration:"",transitionDelay:""};return l.removeTransitionStyles=function(){this.css(c)},l.stagger=function(e){e=isNaN(e)?0:e,this.staggerDelay=e+"ms"},l.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},l.remove=function(){return o&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",(function(){this.removeElem()})),void this.hide()):void this.removeElem()},l.reveal=function(){delete this.isHidden,this.css({display:""});var e=this.layout.options,t={};t[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:e.hiddenStyle,to:e.visibleStyle,isCleaning:!0,onTransitionEnd:t})},l.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},l.getHideRevealTransitionEndProperty=function(e){var t=this.layout.options[e];if(t.opacity)return"opacity";for(var n in t)return n},l.hide=function(){this.isHidden=!0,this.css({display:""});var e=this.layout.options,t={};t[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:e.visibleStyle,to:e.hiddenStyle,isCleaning:!0,onTransitionEnd:t})},l.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},l.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},n},void 0===(v=m.apply(g={},[o,l]))&&(v=g),function(e,t){w=function(t,n,i,o){return function(e,t,n,i,o){function r(e,t){var n=i.getQueryElement(e);if(n){this.element=n,l&&(this.$element=l(this.element)),this.options=i.extend({},this.constructor.defaults),this.option(t);var o=++d;this.element.outlayerGUID=o,c[o]=this,this._create(),this._getOption("initLayout")&&this.layout()}else a&&a.error("Bad element for "+this.constructor.namespace+": "+(n||e))}function s(e){function t(){e.apply(this,arguments)}return t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t}var a=e.console,l=e.jQuery,u=function(){},d=0,c={};r.namespace="outlayer",r.Item=o,r.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var h=r.prototype;i.extend(h,t.prototype),h.option=function(e){i.extend(this.options,e)},h._getOption=function(e){var t=this.constructor.compatOptions[e];return t&&void 0!==this.options[t]?this.options[t]:this.options[e]},r.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},h._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),i.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},h.reloadItems=function(){this.items=this._itemize(this.element.children)},h._itemize=function(e){for(var t=this._filterFindItemElements(e),n=this.constructor.Item,i=[],o=0;o<t.length;o++){var r=new n(t[o],this);i.push(r)}return i},h._filterFindItemElements=function(e){return i.filterFindElements(e,this.options.itemSelector)},h.getItemElements=function(){return this.items.map((function(e){return e.element}))},h.layout=function(){this._resetLayout(),this._manageStamps();var e=this._getOption("layoutInstant"),t=void 0!==e?e:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},h._init=h.layout,h._resetLayout=function(){this.getSize()},h.getSize=function(){this.size=n(this.element)},h._getMeasurement=function(e,t){var i,o=this.options[e];o?("string"==typeof o?i=this.element.querySelector(o):o instanceof HTMLElement&&(i=o),this[e]=i?n(i)[t]:o):this[e]=0},h.layoutItems=function(e,t){e=this._getItemsForLayout(e),this._layoutItems(e,t),this._postLayout()},h._getItemsForLayout=function(e){return e.filter((function(e){return!e.isIgnored}))},h._layoutItems=function(e,t){if(this._emitCompleteOnItems("layout",e),e&&e.length){var n=[];e.forEach((function(e){var i=this._getItemLayoutPosition(e);i.item=e,i.isInstant=t||e.isLayoutInstant,n.push(i)}),this),this._processLayoutQueue(n)}},h._getItemLayoutPosition=function(){return{x:0,y:0}},h._processLayoutQueue=function(e){this.updateStagger(),e.forEach((function(e,t){this._positionItem(e.item,e.x,e.y,e.isInstant,t)}),this)},h.updateStagger=function(){var e=this.options.stagger;return null==e?void(this.stagger=0):(this.stagger=function(e){if("number"==typeof e)return e;var t=e.match(/(^\d*\.?\d*)(\w*)/),n=t&&t[1],i=t&&t[2];return n.length?(n=parseFloat(n))*(p[i]||1):0}(e),this.stagger)},h._positionItem=function(e,t,n,i,o){i?e.goTo(t,n):(e.stagger(o*this.stagger),e.moveTo(t,n))},h._postLayout=function(){this.resizeContainer()},h.resizeContainer=function(){if(this._getOption("resizeContainer")){var e=this._getContainerSize();e&&(this._setContainerMeasure(e.width,!0),this._setContainerMeasure(e.height,!1))}},h._getContainerSize=u,h._setContainerMeasure=function(e,t){if(void 0!==e){var n=this.size;n.isBorderBox&&(e+=t?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),e=Math.max(e,0),this.element.style[t?"width":"height"]=e+"px"}},h._emitCompleteOnItems=function(e,t){function n(){o.dispatchEvent(e+"Complete",null,[t])}function i(){++s==r&&n()}var o=this,r=t.length;if(t&&r){var s=0;t.forEach((function(t){t.once(e,i)}))}else n()},h.dispatchEvent=function(e,t,n){var i=t?[t].concat(n):n;if(this.emitEvent(e,i),l)if(this.$element=this.$element||l(this.element),t){var o=l.Event(t);o.type=e,this.$element.trigger(o,n)}else this.$element.trigger(e,n)},h.ignore=function(e){var t=this.getItem(e);t&&(t.isIgnored=!0)},h.unignore=function(e){var t=this.getItem(e);t&&delete t.isIgnored},h.stamp=function(e){(e=this._find(e))&&(this.stamps=this.stamps.concat(e),e.forEach(this.ignore,this))},h.unstamp=function(e){(e=this._find(e))&&e.forEach((function(e){i.removeFrom(this.stamps,e),this.unignore(e)}),this)},h._find=function(e){return e?("string"==typeof e&&(e=this.element.querySelectorAll(e)),e=i.makeArray(e)):void 0},h._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},h._getBoundingRect=function(){var e=this.element.getBoundingClientRect(),t=this.size;this._boundingRect={left:e.left+t.paddingLeft+t.borderLeftWidth,top:e.top+t.paddingTop+t.borderTopWidth,right:e.right-(t.paddingRight+t.borderRightWidth),bottom:e.bottom-(t.paddingBottom+t.borderBottomWidth)}},h._manageStamp=u,h._getElementOffset=function(e){var t=e.getBoundingClientRect(),i=this._boundingRect,o=n(e);return{left:t.left-i.left-o.marginLeft,top:t.top-i.top-o.marginTop,right:i.right-t.right-o.marginRight,bottom:i.bottom-t.bottom-o.marginBottom}},h.handleEvent=i.handleEvent,h.bindResize=function(){e.addEventListener("resize",this),this.isResizeBound=!0},h.unbindResize=function(){e.removeEventListener("resize",this),this.isResizeBound=!1},h.onresize=function(){this.resize()},i.debounceMethod(r,"onresize",100),h.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},h.needsResizeLayout=function(){var e=n(this.element);return this.size&&e&&e.innerWidth!==this.size.innerWidth},h.addItems=function(e){var t=this._itemize(e);return t.length&&(this.items=this.items.concat(t)),t},h.appended=function(e){var t=this.addItems(e);t.length&&(this.layoutItems(t,!0),this.reveal(t))},h.prepended=function(e){var t=this._itemize(e);if(t.length){var n=this.items.slice(0);this.items=t.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(t,!0),this.reveal(t),this.layoutItems(n)}},h.reveal=function(e){if(this._emitCompleteOnItems("reveal",e),e&&e.length){var t=this.updateStagger();e.forEach((function(e,n){e.stagger(n*t),e.reveal()}))}},h.hide=function(e){if(this._emitCompleteOnItems("hide",e),e&&e.length){var t=this.updateStagger();e.forEach((function(e,n){e.stagger(n*t),e.hide()}))}},h.revealItemElements=function(e){var t=this.getItems(e);this.reveal(t)},h.hideItemElements=function(e){var t=this.getItems(e);this.hide(t)},h.getItem=function(e){for(var t=0;t<this.items.length;t++){var n=this.items[t];if(n.element==e)return n}},h.getItems=function(e){e=i.makeArray(e);var t=[];return e.forEach((function(e){var n=this.getItem(e);n&&t.push(n)}),this),t},h.remove=function(e){var t=this.getItems(e);this._emitCompleteOnItems("remove",t),t&&t.length&&t.forEach((function(e){e.remove(),i.removeFrom(this.items,e)}),this)},h.destroy=function(){var e=this.element.style;e.height="",e.position="",e.width="",this.items.forEach((function(e){e.destroy()})),this.unbindResize();var t=this.element.outlayerGUID;delete c[t],delete this.element.outlayerGUID,l&&l.removeData(this.element,this.constructor.namespace)},r.data=function(e){var t=(e=i.getQueryElement(e))&&e.outlayerGUID;return t&&c[t]},r.create=function(e,t){var n=s(r);return n.defaults=i.extend({},r.defaults),i.extend(n.defaults,t),n.compatOptions=i.extend({},r.compatOptions),n.namespace=e,n.data=r.data,n.Item=s(o),i.htmlInit(n,e),l&&l.bridget&&l.bridget(e,n),n};var p={ms:1,s:1e3};return r.Item=o,r}(e,t,n,i,o)}.apply(y={},_=[o,l,p,v]),void 0!==w||(w=y)}(window),window,_=[w,l],b=function(e,t){var n=e.create("masonry");n.compatOptions.fitWidth="isFitWidth";var i=n.prototype;return i._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var e=0;e<this.cols;e++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},i.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var e=this.items[0],n=e&&e.element;this.columnWidth=n&&t(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,o=this.containerWidth+this.gutter,r=o/i,s=i-o%i;r=Math[s&&1>s?"round":"floor"](r),this.cols=Math.max(r,1)},i.getContainerWidth=function(){var e=this._getOption("fitWidth")?this.element.parentNode:this.element,n=t(e);this.containerWidth=n&&n.innerWidth},i._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth%this.columnWidth,n=Math[t&&1>t?"round":"ceil"](e.size.outerWidth/this.columnWidth);n=Math.min(n,this.cols);for(var i=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](n,e),o={x:this.columnWidth*i.col,y:i.y},r=i.y+e.size.outerHeight,s=n+i.col,a=i.col;s>a;a++)this.colYs[a]=r;return o},i._getTopColPosition=function(e){var t=this._getTopColGroup(e),n=Math.min.apply(Math,t);return{col:t.indexOf(n),y:n}},i._getTopColGroup=function(e){if(2>e)return this.colYs;for(var t=[],n=this.cols+1-e,i=0;n>i;i++)t[i]=this._getColGroupY(i,e);return t},i._getColGroupY=function(e,t){if(2>t)return this.colYs[e];var n=this.colYs.slice(e,e+t);return Math.max.apply(Math,n)},i._getHorizontalColPosition=function(e,t){var n=this.horizontalColIndex%this.cols;n=e>1&&n+e>this.cols?0:n;var i=t.size.outerWidth&&t.size.outerHeight;return this.horizontalColIndex=i?n+e:this.horizontalColIndex,{col:n,y:this._getColGroupY(n,e)}},i._manageStamp=function(e){var n=t(e),i=this._getElementOffset(e),o=this._getOption("originLeft")?i.left:i.right,r=o+n.outerWidth,s=Math.floor(o/this.columnWidth);s=Math.max(0,s);var a=Math.floor(r/this.columnWidth);a-=r%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var l=(this._getOption("originTop")?i.top:i.bottom)+n.outerHeight,u=s;a>=u;u++)this.colYs[u]=Math.max(l,this.colYs[u])},i._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var e={height:this.maxY};return this._getOption("fitWidth")&&(e.width=this._getContainerFitWidth()),e},i._getContainerFitWidth=function(){for(var e=0,t=this.cols;--t&&0===this.colYs[t];)e++;return(this.cols-e)*this.columnWidth-this.gutter},i.needsResizeLayout=function(){var e=this.containerWidth;return this.getContainerWidth(),e!=this.containerWidth},n},void 0===(x="function"==typeof b?b.apply(n,_):b)||(t.exports=x),"undefined"!=typeof window&&window,b=function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var n=this._events=this._events||{},i=n[e]=n[e]||[];return-1==i.indexOf(t)&&i.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var n=this._onceEvents=this._onceEvents||{};return(n[e]=n[e]||{})[t]=!0,this}},t.off=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){var i=n.indexOf(t);return-1!=i&&n.splice(i,1),this}},t.emitEvent=function(e,t){var n=this._events&&this._events[e];if(n&&n.length){n=n.slice(0),t=t||[];for(var i=this._onceEvents&&this._onceEvents[e],o=0;o<n.length;o++){var r=n[o];i&&i[r]&&(this.off(e,r),delete i[r]),r.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e},void 0===(x="function"==typeof b?b.call(n,i,n,t):b)||(t.exports=x),function(e,i){x=function(t){return function(e,t){function n(e,t){for(var n in t)e[n]=t[n];return e}function i(e,t,o){if(!(this instanceof i))return new i(e,t,o);var r=e;return"string"==typeof e&&(r=document.querySelectorAll(e)),r?(this.elements=function(e){return Array.isArray(e)?e:"object"==typeof e&&"number"==typeof e.length?l.call(e):[e]}(r),this.options=n({},this.options),"function"==typeof t?o=t:n(this.options,t),o&&this.on("always",o),this.getImages(),s&&(this.jqDeferred=new s.Deferred),void setTimeout(this.check.bind(this))):void a.error("Bad element for imagesLoaded "+(r||e))}function o(e){this.img=e}function r(e,t){this.url=e,this.element=t,this.img=new Image}var s=e.jQuery,a=e.console,l=Array.prototype.slice;i.prototype=Object.create(t.prototype),i.prototype.options={},i.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},i.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),!0===this.options.background&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&u[t]){for(var n=e.querySelectorAll("img"),i=0;i<n.length;i++){var o=n[i];this.addImage(o)}if("string"==typeof this.options.background){var r=e.querySelectorAll(this.options.background);for(i=0;i<r.length;i++){var s=r[i];this.addElementBackgroundImages(s)}}}};var u={1:!0,9:!0,11:!0};return i.prototype.addElementBackgroundImages=function(e){var t=getComputedStyle(e);if(t)for(var n=/url\((['"])?(.*?)\1\)/gi,i=n.exec(t.backgroundImage);null!==i;){var o=i&&i[2];o&&this.addBackground(o,e),i=n.exec(t.backgroundImage)}},i.prototype.addImage=function(e){var t=new o(e);this.images.push(t)},i.prototype.addBackground=function(e,t){var n=new r(e,t);this.images.push(n)},i.prototype.check=function(){function e(e,n,i){setTimeout((function(){t.progress(e,n,i)}))}var t=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach((function(t){t.once("progress",e),t.check()})):void this.complete()},i.prototype.progress=function(e,t,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emitEvent("progress",[this,e,t]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&a&&a.log("progress: "+n,e,t)},i.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(e,[this]),this.emitEvent("always",[this]),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},o.prototype=Object.create(t.prototype),o.prototype.check=function(){return this.getIsImageComplete()?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},o.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},o.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.img,t])},o.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},o.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},o.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},r.prototype=Object.create(o.prototype),r.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url,this.getIsImageComplete()&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},r.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},r.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.element,t])},i.makeJQueryPlugin=function(t){(t=t||e.jQuery)&&((s=t).fn.imagesLoaded=function(e,t){return new i(this,e,t).jqDeferred.promise(s(this))})},i.makeJQueryPlugin(),i}(e,t)}.apply(n,_=[o]),void 0===x||(t.exports=x)}("undefined"!=typeof window?window:this),_=[i(755)],b=function(e){function t(t){var n=t.data;t.isDefaultPrevented()||(t.preventDefault(),e(t.target).ajaxSubmit(n))}function n(t){var n=t.target,i=e(n);if(!i.is("[type=submit],[type=image]")){var o=i.closest("[type=submit]");if(0===o.length)return;n=o[0]}var r=this;if(r.clk=n,"image"==n.type)if(void 0!==t.offsetX)r.clk_x=t.offsetX,r.clk_y=t.offsetY;else if("function"==typeof e.fn.offset){var s=i.offset();r.clk_x=t.pageX-s.left,r.clk_y=t.pageY-s.top}else r.clk_x=t.pageX-n.offsetLeft,r.clk_y=t.pageY-n.offsetTop;setTimeout((function(){r.clk=r.clk_x=r.clk_y=null}),100)}function i(){if(e.fn.ajaxSubmit.debug){var t="[jquery.form] "+Array.prototype.join.call(arguments,"");window.console&&window.console.log?window.console.log(t):window.opera&&window.opera.postError&&window.opera.postError(t)}}var o={};o.fileapi=void 0!==e("<input type='file'/>").get(0).files,o.formdata=void 0!==window.FormData;var r=!!e.fn.prop;e.fn.attr2=function(){if(!r)return this.attr.apply(this,arguments);var e=this.prop.apply(this,arguments);return e&&e.jquery||"string"==typeof e?e:this.attr.apply(this,arguments)},e.fn.ajaxSubmit=function(t){function n(n){function o(e){var t=null;try{e.contentWindow&&(t=e.contentWindow.document)}catch(e){i("cannot get iframe.contentWindow document: "+e)}if(t)return t;try{t=e.contentDocument?e.contentDocument:e.document}catch(n){i("cannot get iframe.contentDocument: "+n),t=e.document}return t}function a(){var t=u.attr2("target"),n=u.attr2("action"),r=u.attr("enctype")||u.attr("encoding")||"multipart/form-data";T.setAttribute("target",m),(!s||/post/i.test(s))&&T.setAttribute("method","POST"),n!=h.url&&T.setAttribute("action",h.url),h.skipEncodingOverride||s&&!/post/i.test(s)||u.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"}),h.timeout&&(x=setTimeout((function(){_=!0,l(S)}),h.timeout));var a=[];try{if(h.extraData)for(var d in h.extraData)h.extraData.hasOwnProperty(d)&&a.push(e.isPlainObject(h.extraData[d])&&h.extraData[d].hasOwnProperty("name")&&h.extraData[d].hasOwnProperty("value")?e('<input type="hidden" name="'+h.extraData[d].name+'">').val(h.extraData[d].value).appendTo(T)[0]:e('<input type="hidden" name="'+d+'">').val(h.extraData[d]).appendTo(T)[0]);h.iframeTarget||g.appendTo("body"),v.attachEvent?v.attachEvent("onload",l):v.addEventListener("load",l,!1),setTimeout((function e(){try{var t=o(v).readyState;i("state = "+t),t&&"uninitialized"==t.toLowerCase()&&setTimeout(e,50)}catch(e){i("Server abort: ",e," (",e.name,")"),l(k),x&&clearTimeout(x),x=void 0}}),15);try{T.submit()}catch(e){document.createElement("form").submit.apply(T)}}finally{T.setAttribute("action",n),T.setAttribute("enctype",r),t?T.setAttribute("target",t):u.removeAttr("target"),e(a).remove()}}function l(t){if(!w.aborted&&!I){if((A=o(v))||(i("cannot access response document"),t=k),t===S&&w)return w.abort("timeout"),void C.reject(w,"timeout");if(t==k&&w)return w.abort("server abort"),void C.reject(w,"error","server abort");if(A&&A.location.href!=h.iframeSrc||_){v.detachEvent?v.detachEvent("onload",l):v.removeEventListener("load",l,!1);var n,r="success";try{if(_)throw"timeout";var s="xml"==h.dataType||A.XMLDocument||e.isXMLDoc(A);if(i("isXml="+s),!s&&window.opera&&(null===A.body||!A.body.innerHTML)&&--D)return i("requeing onLoad callback, DOM not available"),void setTimeout(l,250);var a=A.body?A.body:A.documentElement;w.responseText=a?a.innerHTML:null,w.responseXML=A.XMLDocument?A.XMLDocument:A,s&&(h.dataType="xml"),w.getResponseHeader=function(e){return{"content-type":h.dataType}[e.toLowerCase()]},a&&(w.status=Number(a.getAttribute("status"))||w.status,w.statusText=a.getAttribute("statusText")||w.statusText);var u=(h.dataType||"").toLowerCase(),d=/(json|script|text)/.test(u);if(d||h.textarea){var c=A.getElementsByTagName("textarea")[0];if(c)w.responseText=c.value,w.status=Number(c.getAttribute("status"))||w.status,w.statusText=c.getAttribute("statusText")||w.statusText;else if(d){var p=A.getElementsByTagName("pre")[0],m=A.getElementsByTagName("body")[0];p?w.responseText=p.textContent?p.textContent:p.innerText:m&&(w.responseText=m.textContent?m.textContent:m.innerText)}}else"xml"==u&&!w.responseXML&&w.responseText&&(w.responseXML=O(w.responseText));try{$=j(w,u,h)}catch(e){r="parsererror",w.error=n=e||r}}catch(e){i("error caught: ",e),r="error",w.error=n=e||r}w.aborted&&(i("upload aborted"),r=null),w.status&&(r=w.status>=200&&w.status<300||304===w.status?"success":"error"),"success"===r?(h.success&&h.success.call(h.context,$,"success",w),C.resolve(w.responseText,"success",w),f&&e.event.trigger("ajaxSuccess",[w,h])):r&&(void 0===n&&(n=w.statusText),h.error&&h.error.call(h.context,w,r,n),C.reject(w,"error",n),f&&e.event.trigger("ajaxError",[w,h,n])),f&&e.event.trigger("ajaxComplete",[w,h]),f&&! --e.active&&e.event.trigger("ajaxStop"),h.complete&&h.complete.call(h.context,w,r),I=!0,h.timeout&&clearTimeout(x),setTimeout((function(){h.iframeTarget?g.attr("src",h.iframeSrc):g.remove(),w.responseXML=null}),100)}}}var d,c,h,f,m,g,v,w,y,b,_,x,T=u[0],C=e.Deferred();if(C.abort=function(e){w.abort(e)},n)for(c=0;c<p.length;c++)d=e(p[c]),r?d.prop("disabled",!1):d.removeAttr("disabled");if((h=e.extend(!0,{},e.ajaxSettings,t)).context=h.context||h,m="jqFormIO"+(new Date).getTime(),h.iframeTarget?(b=(g=e(h.iframeTarget)).attr2("name"))?m=b:g.attr2("name",m):(g=e('<iframe name="'+m+'" src="'+h.iframeSrc+'" />')).css({position:"absolute",top:"-1000px",left:"-1000px"}),v=g[0],w={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(t){var n="timeout"===t?"timeout":"aborted";i("aborting upload... "+n),this.aborted=1;try{v.contentWindow.document.execCommand&&v.contentWindow.document.execCommand("Stop")}catch(e){}g.attr("src",h.iframeSrc),w.error=n,h.error&&h.error.call(h.context,w,n,t),f&&e.event.trigger("ajaxError",[w,h,n]),h.complete&&h.complete.call(h.context,w,n)}},(f=h.global)&&0==e.active++&&e.event.trigger("ajaxStart"),f&&e.event.trigger("ajaxSend",[w,h]),h.beforeSend&&!1===h.beforeSend.call(h.context,w,h))return h.global&&e.active--,C.reject(),C;if(w.aborted)return C.reject(),C;(y=T.clk)&&(b=y.name)&&!y.disabled&&(h.extraData=h.extraData||{},h.extraData[b]=y.value,"image"==y.type&&(h.extraData[b+".x"]=T.clk_x,h.extraData[b+".y"]=T.clk_y));var S=1,k=2,E=e("meta[name=csrf-token]").attr("content"),P=e("meta[name=csrf-param]").attr("content");P&&E&&(h.extraData=h.extraData||{},h.extraData[P]=E),h.forceSync?a():setTimeout(a,10);var $,A,I,D=50,O=e.parseXML||function(e,t){return window.ActiveXObject?((t=new ActiveXObject("Microsoft.XMLDOM")).async="false",t.loadXML(e)):t=(new DOMParser).parseFromString(e,"text/xml"),t&&t.documentElement&&"parsererror"!=t.documentElement.nodeName?t:null},L=e.parseJSON||function(e){return window.eval("("+e+")")},j=function(t,n,i){var o=t.getResponseHeader("content-type")||"",r="xml"===n||!n&&o.indexOf("xml")>=0,s=r?t.responseXML:t.responseText;return r&&"parsererror"===s.documentElement.nodeName&&e.error&&e.error("parsererror"),i&&i.dataFilter&&(s=i.dataFilter(s,n)),"string"==typeof s&&("json"===n||!n&&o.indexOf("json")>=0?s=L(s):("script"===n||!n&&o.indexOf("javascript")>=0)&&e.globalEval(s)),s};return C}if(!this.length)return i("ajaxSubmit: skipping submit process - no element selected"),this;var s,a,l,u=this;"function"==typeof t?t={success:t}:void 0===t&&(t={}),s=t.type||this.attr2("method"),(l=(l="string"==typeof(a=t.url||this.attr2("action"))?e.trim(a):"")||window.location.href||"")&&(l=(l.match(/^([^#]+)/)||[])[1]),t=e.extend(!0,{url:l,success:e.ajaxSettings.success,type:s||e.ajaxSettings.type,iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},t);var d={};if(this.trigger("form-pre-serialize",[this,t,d]),d.veto)return i("ajaxSubmit: submit vetoed via form-pre-serialize trigger"),this;if(t.beforeSerialize&&!1===t.beforeSerialize(this,t))return i("ajaxSubmit: submit aborted via beforeSerialize callback"),this;var c=t.traditional;void 0===c&&(c=e.ajaxSettings.traditional);var h,p=[],f=this.formToArray(t.semantic,p);if(t.data&&(t.extraData=t.data,h=e.param(t.data,c)),t.beforeSubmit&&!1===t.beforeSubmit(f,this,t))return i("ajaxSubmit: submit aborted via beforeSubmit callback"),this;if(this.trigger("form-submit-validate",[f,this,t,d]),d.veto)return i("ajaxSubmit: submit vetoed via form-submit-validate trigger"),this;var m=e.param(f,c);h&&(m=m?m+"&"+h:h),"GET"==t.type.toUpperCase()?(t.url+=(t.url.indexOf("?")>=0?"&":"?")+m,t.data=null):t.data=m;var g=[];if(t.resetForm&&g.push((function(){u.resetForm()})),t.clearForm&&g.push((function(){u.clearForm(t.includeHidden)})),!t.dataType&&t.target){var v=t.success||function(){};g.push((function(n){var i=t.replaceTarget?"replaceWith":"html";e(t.target)[i](n).each(v,arguments)}))}else t.success&&g.push(t.success);if(t.success=function(e,n,i){for(var o=t.context||this,r=0,s=g.length;s>r;r++)g[r].apply(o,[e,n,i||u,u])},t.error){var w=t.error;t.error=function(e,n,i){var o=t.context||this;w.apply(o,[e,n,i,u])}}if(t.complete){var y=t.complete;t.complete=function(e,n){var i=t.context||this;y.apply(i,[e,n,u])}}var b=e("input[type=file]:enabled",this).filter((function(){return""!==e(this).val()})).length>0,_="multipart/form-data",x=u.attr("enctype")==_||u.attr("encoding")==_,T=o.fileapi&&o.formdata;i("fileAPI :"+T);var C,S=(b||x)&&!T;!1!==t.iframe&&(t.iframe||S)?t.closeKeepAlive?e.get(t.closeKeepAlive,(function(){C=n(f)})):C=n(f):C=(b||x)&&T?function(n){for(var i=new FormData,o=0;o<n.length;o++)i.append(n[o].name,n[o].value);if(t.extraData){var r=function(n){var i,o,r=e.param(n,t.traditional).split("&"),s=r.length,a=[];for(i=0;s>i;i++)r[i]=r[i].replace(/\+/g," "),o=r[i].split("="),a.push([decodeURIComponent(o[0]),decodeURIComponent(o[1])]);return a}(t.extraData);for(o=0;o<r.length;o++)r[o]&&i.append(r[o][0],r[o][1])}t.data=null;var a=e.extend(!0,{},e.ajaxSettings,t,{contentType:!1,processData:!1,cache:!1,type:s||"POST"});t.uploadProgress&&(a.xhr=function(){var n=e.ajaxSettings.xhr();return n.upload&&n.upload.addEventListener("progress",(function(e){var n=0,i=e.loaded||e.position,o=e.total;e.lengthComputable&&(n=Math.ceil(i/o*100)),t.uploadProgress(e,i,o,n)}),!1),n}),a.data=null;var l=a.beforeSend;return a.beforeSend=function(e,n){n.data=t.formData?t.formData:i,l&&l.call(this,e,n)},e.ajax(a)}(f):e.ajax(t),u.removeData("jqxhr").data("jqxhr",C);for(var k=0;k<p.length;k++)p[k]=null;return this.trigger("form-submit-notify",[this,t]),this},e.fn.ajaxForm=function(o){if((o=o||{}).delegation=o.delegation&&e.isFunction(e.fn.on),!o.delegation&&0===this.length){var r={s:this.selector,c:this.context};return!e.isReady&&r.s?(i("DOM not ready, queuing ajaxForm"),e((function(){e(r.s,r.c).ajaxForm(o)})),this):(i("terminating; zero elements found by selector"+(e.isReady?"":" (DOM not ready)")),this)}return o.delegation?(e(document).off("submit.form-plugin",this.selector,t).off("click.form-plugin",this.selector,n).on("submit.form-plugin",this.selector,o,t).on("click.form-plugin",this.selector,o,n),this):this.ajaxFormUnbind().bind("submit.form-plugin",o,t).bind("click.form-plugin",o,n)},e.fn.ajaxFormUnbind=function(){return this.unbind("submit.form-plugin click.form-plugin")},e.fn.formToArray=function(t,n){var i=[];if(0===this.length)return i;var r,s,a,l,u,d,c,h,p=this[0],f=this.attr("id"),m=t?p.getElementsByTagName("*"):p.elements;if(m&&!/MSIE [678]/.test(navigator.userAgent)&&(m=e(m).get()),f&&(r=e(':input[form="'+f+'"]').get()).length&&(m=(m||[]).concat(r)),!m||!m.length)return i;for(s=0,c=m.length;c>s;s++)if((l=(d=m[s]).name)&&!d.disabled)if(t&&p.clk&&"image"==d.type)p.clk==d&&(i.push({name:l,value:e(d).val(),type:d.type}),i.push({name:l+".x",value:p.clk_x},{name:l+".y",value:p.clk_y}));else if((u=e.fieldValue(d,!0))&&u.constructor==Array)for(n&&n.push(d),a=0,h=u.length;h>a;a++)i.push({name:l,value:u[a]});else if(o.fileapi&&"file"==d.type){n&&n.push(d);var g=d.files;if(g.length)for(a=0;a<g.length;a++)i.push({name:l,value:g[a],type:d.type});else i.push({name:l,value:"",type:d.type})}else null!=u&&(n&&n.push(d),i.push({name:l,value:u,type:d.type,required:d.required}));if(!t&&p.clk){var v=e(p.clk),w=v[0];(l=w.name)&&!w.disabled&&"image"==w.type&&(i.push({name:l,value:v.val()}),i.push({name:l+".x",value:p.clk_x},{name:l+".y",value:p.clk_y}))}return i},e.fn.formSerialize=function(t){return e.param(this.formToArray(t))},e.fn.fieldSerialize=function(t){var n=[];return this.each((function(){var i=this.name;if(i){var o=e.fieldValue(this,t);if(o&&o.constructor==Array)for(var r=0,s=o.length;s>r;r++)n.push({name:i,value:o[r]});else null!=o&&n.push({name:this.name,value:o})}})),e.param(n)},e.fn.fieldValue=function(t){for(var n=[],i=0,o=this.length;o>i;i++){var r=this[i],s=e.fieldValue(r,t);null==s||s.constructor==Array&&!s.length||(s.constructor==Array?e.merge(n,s):n.push(s))}return n},e.fieldValue=function(t,n){var i=t.name,o=t.type,r=t.tagName.toLowerCase();if(void 0===n&&(n=!0),n&&(!i||t.disabled||"reset"==o||"button"==o||("checkbox"==o||"radio"==o)&&!t.checked||("submit"==o||"image"==o)&&t.form&&t.form.clk!=t||"select"==r&&-1==t.selectedIndex))return null;if("select"==r){var s=t.selectedIndex;if(0>s)return null;for(var a=[],l=t.options,u="select-one"==o,d=u?s+1:l.length,c=u?s:0;d>c;c++){var h=l[c];if(h.selected){var p=h.value;if(p||(p=h.attributes&&h.attributes.value&&!h.attributes.value.specified?h.text:h.value),u)return p;a.push(p)}}return a}return e(t).val()},e.fn.clearForm=function(t){return this.each((function(){e("input,select,textarea",this).clearFields(t)}))},e.fn.clearFields=e.fn.clearInputs=function(t){var n=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each((function(){var i=this.type,o=this.tagName.toLowerCase();n.test(i)||"textarea"==o?this.value="":"checkbox"==i||"radio"==i?this.checked=!1:"select"==o?this.selectedIndex=-1:"file"==i?/MSIE/.test(navigator.userAgent)?e(this).replaceWith(e(this).clone(!0)):e(this).val(""):t&&(!0===t&&/hidden/.test(i)||"string"==typeof t&&e(this).is(t))&&(this.value="")}))},e.fn.resetForm=function(){return this.each((function(){("function"==typeof this.reset||"object"==typeof this.reset&&!this.reset.nodeType)&&this.reset()}))},e.fn.enable=function(e){return void 0===e&&(e=!0),this.each((function(){this.disabled=!e}))},e.fn.selected=function(t){return void 0===t&&(t=!0),this.each((function(){var n=this.type;if("checkbox"==n||"radio"==n)this.checked=t;else if("option"==this.tagName.toLowerCase()){var i=e(this).parent("select");t&&i[0]&&"select-one"==i[0].type&&i.find("option").selected(!1),this.selected=t}}))},e.fn.ajaxSubmit.debug=!1},void 0===(x="function"==typeof b?b.apply(n,_):b)||(t.exports=x),$.cookie=function(e,t,n){if(arguments.length>1&&"[object Object]"!==String(t)){if(n=$.extend({},n),null==t&&(n.expires=-1),"number"==typeof n.expires){var i=n.expires,o=n.expires=new Date;o.setDate(o.getDate()+i)}return t=String(t),document.cookie=[encodeURIComponent(e),"=",n.raw?t:encodeURIComponent(t),n.expires?"; expires="+n.expires.toUTCString():"",n.path?"; path="+n.path:"",n.domain?"; domain="+n.domain:"",n.secure?"; secure":""].join("")}var r,s=(n=t||{}).raw?function(e){return e}:decodeURIComponent;return(r=new RegExp("(?:^|; )"+encodeURIComponent(e)+"=([^;]*)").exec(document.cookie))?s(r[1]):null},function(e,o,r){t.exports?t.exports=r():void 0===(x=function(){return r()}.call(n,i,n,t))||(t.exports=x)}(window,0,(function(){var e=function(){return window.devicePixelRatio||1},t=function(){return{zoom:1,devicePxPerCssPx:1}},n=function(){var t=Math.round(screen.deviceXDPI/screen.logicalXDPI*100)/100;return{zoom:t,devicePxPerCssPx:t*e()}},i=function(){var t=Math.round(document.documentElement.offsetHeight/window.innerHeight*100)/100;return{zoom:t,devicePxPerCssPx:t*e()}},o=function(){var t=Math.round(window.outerWidth/window.innerWidth*100)/100;return{zoom:t,devicePxPerCssPx:t*e()}},r=function(){var t=Math.round(document.documentElement.clientWidth/window.innerWidth*100)/100;return{zoom:t,devicePxPerCssPx:t*e()}},s=function(){var t=(90==Math.abs(window.orientation)?screen.height:screen.width)/window.innerWidth;return{zoom:t,devicePxPerCssPx:t*e()}},a=function(){var t=function(e){return e.replace(/;/g," !important;")},n=document.createElement("div");n.innerHTML="1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>0",n.setAttribute("style",t("font: 100px/1em sans-serif; -webkit-text-size-adjust: none; text-size-adjust: none; height: auto; width: 1em; padding: 0; overflow: visible;"));var i=document.createElement("div");i.setAttribute("style",t("width:0; height:0; overflow:hidden; visibility:hidden; position: absolute;")),i.appendChild(n),document.body.appendChild(i);var o=1e3/n.clientHeight;return o=Math.round(100*o)/100,document.body.removeChild(i),{zoom:o,devicePxPerCssPx:o*e()}},l=function(){var e=c("min--moz-device-pixel-ratio","",0,10,20,1e-4);return{zoom:e=Math.round(100*e)/100,devicePxPerCssPx:e}},u=function(){return{zoom:l().zoom,devicePxPerCssPx:e()}},d=function(){var t=window.top.outerWidth/window.top.innerWidth;return{zoom:t=Math.round(100*t)/100,devicePxPerCssPx:t*e()}},c=function(e,t,n,i,o,r){var s,a,l,u;window.matchMedia?s=window.matchMedia:(a=document.getElementsByTagName("head")[0],l=document.createElement("style"),a.appendChild(l),(u=document.createElement("div")).className="mediaQueryBinarySearch",u.style.display="none",document.body.appendChild(u),s=function(e){l.sheet.insertRule("@media "+e+"{.mediaQueryBinarySearch {text-decoration: underline} }",0);var t="underline"==getComputedStyle(u,null).textDecoration;return l.sheet.deleteRule(0),{matches:t}});var d=function n(i,o,a){var l=(i+o)/2;return 0>=a||r>o-i?l:s("("+e+":"+l+t+")").matches?n(l,o,a-1):n(i,l,a-1)}(n,i,o);return u&&(a.removeChild(l),document.body.removeChild(u)),d},h=function(){var e=t;return isNaN(screen.logicalXDPI)||isNaN(screen.systemXDPI)?window.navigator.msMaxTouchPoints?e=i:window.chrome&&!(window.opera||navigator.userAgent.indexOf(" Opera")>=0)?e=o:Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")>0?e=r:"orientation"in window&&"webkitRequestAnimationFrame"in window?e=s:"webkitRequestAnimationFrame"in window?e=a:navigator.userAgent.indexOf("Opera")>=0?e=d:window.devicePixelRatio?e=u:l().zoom>.001&&(e=l):e=n,e}();return{zoom:function(){return h().zoom},device:function(){return h().devicePxPerCssPx}}})),window.inAction=1,window.allowSlide=1,window.blockScroll=1,window.effectOffset=500,window.effectSpeed=1e3,window.slideSpeed=1e3,window.cleanupDelay=1400,window.horizontalMode=0,window.sidebarShown=0,window.loadingProgress=0,window.smoothScroll=0,window.scrollSpeed=.5,window.preload=1,window.setHashLink=1,window.hideSidebarOnBodyClick=1,window.collectScrolls=0,window.sliderStatus=0,window.minScrollToSlide=500,window.minSwipeToSlide=4,window.enableMobileZoom=0,window.hideOnScrollSensitivity=100,window.allowParallaxOnMobile=1,window.hidePopupOnBodyClick=1;var k=$("html");$(window).on("load",(function(){window.loaded=1})),$(document).ready((function(){var e=$("body");function t(){var e=window.location.href.split("#")[1];if(e&&$('.slide[data-name="'+e+'"]').length>0){var t=$('.slide[data-name="'+e+'"]');window.isMobile&&window.isSimplifiedMobile||window.isScroll?t.length&&(!window.preload||window.loaded?$("html,body").stop().clearQueue().animate({scrollTop:t.position().top},window.effectSpeed):$(window).on("load",(function(){$("html,body").stop().clearQueue().animate({scrollTop:t.position().top},window.effectSpeed)}))):(window.stage=$(".slide").index(t)+1,r(window.stage))}}if(setTimeout((function(){$(window).trigger("ready")}),1),e.hide().show(0),window.isScroll=e.hasClass("scroll"),window.isSimplifiedMobile=e.hasClass("simplifiedMobile"),(window.isScroll||window.isSimplifiedMobile&&window.isMobile)&&k.addClass("scrollable"),k.addClass("page-ready"),e.hasClass("fast")?(window.slideSpeed=700,window.cleanupDelay=1200,window.effectSpeed=800,window.scrollSpeed=.35,window.effectOffset=400):e.hasClass("slow")&&(window.slideSpeed=1400,window.cleanupDelay=2e3,window.effectSpeed=1400,window.effectOffset=400,window.scrollSpeed=.8,window.effectOffset=600),window.stage=1,window.stages=$(".slide").length,e.hasClass("horizontal")&&(window.horizontalMode=1),e.hasClass("noPreload")&&(window.preload=0),e.hasClass("animated")?window.isAnimated="auto":e.hasClass("animateOnEvent")&&(window.isAnimated="animateOnEvent",window.isMobile&&(window.isAnimated="auto",e.removeClass("animateOnEvent").addClass("animated"))),window.isSimplifiedMobile&&window.isMobile&&(window.isAnimated=!1,e.removeClass("animated animateOnEvent"),$("[class*='ae-']").addClass("done")),window.isAnimated||(window.cleanupDelay=0),e.hasClass("smoothScroll")&&!window.isMobile&&(window.smoothScroll=1),t(),$(window).on("popstate",(function(e){setTimeout((function(){t()}),100),e.preventDefault()})),window.preload){var n=[];function i(){var e=window.loadingProgress/window.images;window.progressBar.css("width",100*e+"%"),window.loadingProgress==window.images&&window.progressBar.addClass("loaded")}$("*").each((function(){"none"!==$(this).css("background-image")?n.push($(this).css("background-image").replace(/.*\s?url\([\'\"]?/,"").replace(/[\'\"]?\).*/,"")):$(this).is("img")&&n.push($(this).attr("src"))})),window.images=n.length,window.progressBar=$(".progress-bar"),$.cacheImage(n,{complete:function(){window.loadingProgress++,i()}}),i()}function o(){k.addClass("page-loaded"),window.inAction=0,window.blockScroll=0,window.loaded=1,setTimeout((function(){window.isScroll&&(l(),v()),window.isMobile&&window.isSimplifiedMobile?($(".slide").addClass("selected animate active"),l(),v()):r(window.stage)}),500)}function r(t){if(t=parseInt(t),!(window.isMobile&&window.isSimplifiedMobile||window.isScroll)){v();var n=$(".slide").eq(t-1),i=$(".slide.selected"),o=i.index(".slide")+1;C(),s(),w(),window.allowSlide=1,e.removeClass("sidebarShown lastSlide firstSlide hidePanel-top hidePanel-bottom"),0!=window.setStageClasses&&(1===window.stage&&e.addClass("firstSlide"),window.stages===window.stage&&1!==window.stages&&e.addClass("lastSlide"),e.removeClassByPrefix("stage-").addClass("stage-"+window.stage)),n.hasClass("whiteSlide")?e.addClass("whiteSlide"):e.removeClass("whiteSlide"),o!==t&&0!=window.setStageClasses&&(i.removeClass("selected").addClass("active"),n.removeClass("before after").addClass("selected active"),n.prevAll(".slide").addClass("before").removeClass("after"),n.nextAll(".slide").addClass("after").removeClass("before"),$(window).trigger("slideChange",[parseInt(t),n])),window.setHashLink&&(n.attr("data-name")||n.attr("id")?window.location.hash=n.attr("data-name")?n.attr("data-name"):n.attr("id"):window.location.toString().indexOf("#")>0&&"file:"!==location.protocol&&location.href.split("#")[0]&&(history.pushState?window.history.pushState("","",location.href.split("#")[0]):window.location.hash="")),n.find(".content, .container").scrollTop(0),window.loaded&&(window.blockScroll=1,setTimeout((function(){o!==t&&i.removeClass("active animate"),window.blockScroll=0}),window.effectSpeed),window.effectOffset>window.slideSpeed&&(window.effectOffset=window.slideSpeed),setTimeout((function(){n.addClass("animate")}),window.slideSpeed-window.effectOffset),$(".done").removeClass("done"),clearTimeout(window.clearElementAnimation),window.clearElementAnimation=setTimeout((function(){$(".slide.selected [class*='ae-']").addClass("done")}),window.slideSpeed+window.effectSpeed+window.cleanupDelay))}}function s(e){$(".zoom-overlay-open").length>0&&($(".zoom-img").click(),e&&$(".zoom-img-wrap, .zoom-overlay").remove())}r(window.stage),$(".grid.masonry").masonry({itemSelector:"li",transitionDuration:"0.1s"}),$(".grid.masonry").imagesLoaded().progress((function(){$(".grid.masonry").masonry("layout")})),window.preload&&window.images&&!window.loaded||o(),window.loaded||$(window).on("load",(function(){o()})),$(".animated").on("click","[class*='ae-']:not('.done')",(function(){$(this).addClass("done")})),window.changeSlide=function(e){if("increase"===e?e=window.stage+1>=window.stages?window.stages:window.stage+1:"decrease"===e&&(e=window.stage-1<1?1:window.stage-1),window.isMobile&&window.isSimplifiedMobile||window.isScroll){window.stage=e;var t=$(".slide:eq("+(window.stage-1)+")"),n=$(t).offset().top;$("html,body").stop().clearQueue().animate({scrollTop:n},1e3)}else if(e!==window.stage&&e<=window.stages&&1!==window.inAction){window.inAction=1,window.stage=e;var i=0;$(".zoom-overlay-open").length>0&&(s(),i=550),setTimeout((function(){r(window.stage),setTimeout((function(){window.inAction=0}),window.slideSpeed)}),i)}},$(".nextSlide").on("click",(function(){window.changeSlide("increase")})),$(".prevSlide").on("click",(function(){window.changeSlide("decrease")})),$(".toFirstSlide").on("click",(function(){window.changeSlide(1),history.pushState?window.history.pushState("","",location.href.split("#")[0]):window.location.hash="",w()})),$(".toLastSlide").on("click",(function(){window.changeSlide(window.stages),history.pushState?window.history.pushState("","",location.href.split("#")[0]):window.location.hash="",w()})),$('[class*="toSlide-"]').on("click",(function(){var e=parseInt($(this).attr("class").split("toSlide-")[1].split(" ")[0]);window.changeSlide(e),w()})),$(window).on("resize load ready",(function(){$('[data-action="zoom"]').removeAttr("style"),$(".zoom-overlay").length>0&&s("fast"),window.windowHeight=$(window).height(),window.windowWidth=$(window).width(),window.documentHeight=$(document).height()})),$("html,body").on("DOMMouseScroll mousewheel scroll touchmove",(function(t){var n=$(".slide.selected .content"),i=Math.ceil(Math.abs(t.deltaY)*t.deltaFactor),o=window.isFirefox?2:1,r=window.isWindows?2*o:o,s=(t.originalEvent.wheelDelta?t.originalEvent.wheelDelta:t.deltaY*t.deltaFactor)*o*r,a=t.deltaY>=0?"up":"down",l=n.scrollTop(),u=n.find(".container").outerHeight(),d=detectZoom.device(),c=window.isFirefox&&window.isWindows?200:window.minScrollToSlide;if(i){if(window.isScroll&&!window.sidebarShown&&!window.popupShown&&!window.blockScroll)if(window.smoothScroll&&!window.isMobile){t.preventDefault(),s>1500&&(s=1500),s<-1e3&&(s=-1500);var h=$(window),p=h.scrollTop()-s;TweenLite.to(h,window.scrollSpeed,{scrollTo:{y:p,autoKill:!1},ease:Power4.easeOut,overwrite:"all"})}else window.isWindows||n.scrollTop(l-s);window.isScroll||window.isMobile&&window.isSimplifiedMobile||(u>window.windowHeight&&("up"===a&&0===n.scrollTop()||"down"===a&&n.scrollTop()+window.windowHeight>=Math.floor(u/d)?window.allowSlide=1:window.allowSlide=0,window.panelsToHide&&("down"===a&&n.scrollTop()>0?e.addClass("hidePanel-top"):"up"===a&&e.removeClass("hidePanel-top"),e.addClass("hidePanel-bottom"),"down"===a&&n.scrollTop()+window.windowHeight>=Math.floor(u/d)?e.removeClass("hidePanel-bottom"):"up"===a&&e.addClass("hidePanel-bottom")),window.sidebarShown||window.popupShown||window.blockScroll||(window.smoothScroll?(t.preventDefault(),s>1500&&(s=1500),s<-1e3&&(s=-1500),TweenLite.to(n,.5,{scrollTo:{y:l-s,autoKill:!1},ease:Power4.easeOut,overwrite:5})):(l="up"===a?l-i:l+i,n.scrollTop(l)))),window.allowSlide&&i&&(window.collectScrolls="down"==a?window.collectScrolls+i:window.collectScrolls-i,setTimeout((function(){window.collectScrolls=0}),200)),Math.abs(window.collectScrolls)>=c&&window.allowSlide&&!window.sidebarShown&&!window.popupShown&&!window.disableOnScroll&&(window.collectScrolls=0,("down"===a&&window.stage!==window.stages||"up"===a&&1!==window.stage)&&1!==window.inAction&&("down"===a?window.changeSlide("increase"):window.changeSlide("decrease"))))}})),(window.isMobile&&window.isSimplifiedMobile||window.isScroll)&&$(window).on("DOMMouseScroll mousewheel scroll touchmove load",(function(){l()}));var a=0;function l(){++a>=2&&(C(),a=0),$(".slide").each((function(t,n){var i=$(n),o=i.index(".slide"),r=$(document).scrollTop(),s=i.offset().top,a=i.height(),l=window.windowHeight/2>a?a/2:window.windowHeight/2,u=s<window.windowHeight+r-l&&s>r-a+l,d=2*((r+window.windowHeight-s)/(window.windowHeight+a)-.5),c=!0;0===r&&(c=0===t),r+window.windowHeight===window.documentHeight&&(c=t===window.stages-1),0!=window.setStageClasses&&(u&&c?(i.prevAll(".slide").addClass("before").removeClass("after"),i.nextAll(".slide").addClass("after").removeClass("before"),i.addClass("selected animate active").removeClass("after before"),window.stage===o+1&&window.firstTimeTrigger||(window.stage=o+1,$(window).trigger("slideChange",[window.stage,i]),1===window.stage?e.addClass("firstSlide"):e.removeClass("firstSlide"),window.stages===window.stage?e.addClass("lastSlide"):e.removeClass("lastSlide"),e.removeClassByPrefix("stage-").addClass("stage-"+window.stage),i.hasClass("whiteSlide")?e.addClass("whiteSlide"):e.removeClass("whiteSlide"),"auto"==window.isAnimated&&(window.clearElementAnimation=setTimeout((function(){i.find("[class*='ae-']").addClass("done")}),window.effectSpeed+window.cleanupDelay)),v()),window.firstTimeTrigger||(window.firstTimeTrigger=1,$(window).trigger("slideChange",[window.stage,i]))):i.removeClass("selected")),!(d>-1&&d<1)||window.allowParallaxOnMobile&&window.isMobile||(i.hasClass("parallax")||i.find(".parallax-element"))&&i.find(".parallax-element").each((function(){var e=$(this),t=parseInt(e.data("parallax-velocity"))?parseInt(e.data("parallax-velocity")):50,n=d*t;t>100&&(t=100),e.css("-webkit-transform","translate3d(0, "+n+"%, 0)").css("transform","translate3d(0, "+n+"%, 0)")}))})),"animateOnEvent"==window.isAnimated&&(window.preload?window.loaded&&$("[class*='ae-']").each((function(e,t){var n=$(t);u(n)&&n.addClass("do").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",(function(){$(this).removeClassByPrefix("ae-").removeClass("do").addClass("done")}))})):$("[class*='ae-']").each((function(e,t){var n=$(t);u(n)&&n.addClass("do").one("webkitAnimationEnd oanimationend msAnimationEnd animationend",(function(){$(this).removeClassByPrefix("ae-").removeClass("do").addClass("done")}))})))}function u(e){var t=$(window).scrollTop(),n=$(e),i=n.height(),o=t+window.windowHeight,r=n.offset().top,s=r+i;return i>=window.windowHeight/5?o>=r+i/5:t<r&&o>s}if($(".mobile .slides:not(.scroll):not(.simplifiedMobile), .slides.desktopSwipe").swipe({swipeStatus:function(e,t,n,i){window.allowSwipeUp=1,window.allowSwipeDown=1;var o=$(".slide.selected .content"),r=Math.floor(o.find(".container").outerHeight()),s="up",a="down",l=window.minSwipeToSlide,u=window.innerHeight;window.sidebarShown&&(o=$(".sidebar .content")),window.popupShown&&(o=$(".popup .content")),"start"===t&&(window.scrollTop=o.scrollTop()),window.horizontalMode&&(s="left",a="right"),!window.horizontalMode&&r>u&&(window.scrollTop+u<r&&(window.allowSwipeUp=0),window.scrollTop>0&&(window.allowSwipeDown=0)),window.sidebarShown||window.disableOnSwipe||(window.horizontalMode?n===s&&i>l?window.changeSlide("increase"):n===a&&i>l&&window.changeSlide("decrease"):n===s&&i>l&&window.allowSwipeUp&&window.allowSlide?window.changeSlide("increase"):n===a&&i>l&&window.allowSwipeDown&&window.allowSlide&&window.changeSlide("decrease"))},maxTimeThreshold:0,fingers:"all",allowPageScroll:"vertical"}),$(".slides.desktopSwipe *").on("click",(function(){$(this).addClass("selectable")})),$(".panel .compact").length>0&&$(".panel .compact").each((function(e,t){var n=$(t).parents(".panel"),i=$(n).find(".desktop"),o=t,r=$(n).hasClass("forceMobileView");$(window).on("load resize ready",(function(){var e=$(document).width(),t=parseInt($(n).css("padding-left").replace("px",""))+parseInt($(n).css("padding-right").replace("px",""));if((window.isMobile||$(document).width()<767)&&r)$(i).addClass("hidden"),$(o).removeClass("hidden");else{$(i).removeClass("hidden"),$(o).addClass("hidden");var s=0;i.children().each((function(){$(this).outerWidth()>$(this).children().outerWidth()?s+=Math.round($(this).outerWidth()):s+=Math.round($(this).children().outerWidth())})),s+Math.round(t)>e+2||(window.isMobile||e<767)&&r?($(i).addClass("hidden"),$(o).removeClass("hidden")):($(i).removeClass("hidden"),$(o).addClass("hidden"))}}))})),$(".panel.hideOnScroll").length>0&&(window.panelsToHide=!0,window.isScroll||window.isSimplifiedMobile)){var d,c=0,h=window.hideOnScrollSensitivity?window.hideOnScrollSensitivity:100,p=$(".panel.hideOnScroll");$(window).on("mousewheel",(function(e){var t=$(this).scrollTop(),n=$(p),i=Math.ceil(Math.abs(e.deltaY)*e.deltaFactor);t>d?(c+=i)>=h&&(n.addClass("hide"),c=h):(c-=i)<=h/5&&(c=0,n.removeClass("hide")),d=t,(t+window.windowHeight+h>=window.documentHeight||t+h<=0)&&n.removeClass("hide")}))}$(document).on("keydown",(function(e){var t=$(".slide.selected .content"),n=t.scrollTop()+parseInt(125);window.window.disableKeyNavigation||"input"==e.target.nodeName.toLowerCase()||"textarea"==e.target.nodeName.toLowerCase()||(37===e.keyCode&&(e.preventDefault(),window.horizontalMode&&window.changeSlide("decrease")),38===e.keyCode&&(window.horizontalMode?(e.preventDefault(),TweenLite.to(t,window.scrollSpeed,{scrollTo:{y:n,autoKill:!0},ease:Power4.easeOut,overwrite:5})):(e.preventDefault(),window.changeSlide("decrease"))),39===e.keyCode&&window.horizontalMode&&(e.preventDefault(),window.changeSlide("increase")),40===e.keyCode&&(window.horizontalMode?(e.preventDefault(),TweenLite.to(t,window.scrollSpeed,{scrollTo:{y:n,autoKill:!0},ease:Power4.easeOut,overwrite:5})):(e.preventDefault(),window.changeSlide("increase"))),27===e.keyCode&&(w(),C(),y(),s()))}));var f=$(".navigation"),m=$(f).find("ul"),g=$(".slide:not(.exclude)").length;function v(){setTimeout((function(){$(m).length>0&&$(m).each((function(e,t){$(t).find("li.selected").removeClass("selected");var n=$(".slide.selected"),i=parseInt(n.data("parent-slide-id")),o=n.index(".slide:not(.exclude)");-1!==o?$(t).find("li").eq(o).addClass("selected"):i&&(o=$('.slide[data-slide-id="'+i+'"]').index(".slide:not(.exclude)"),$(t).find("li").eq(o).addClass("selected"))}))}),100)}function w(){if(window.sidebarShown){k.removeClass("sidebarShown").removeClassByPrefix("sidebar_");var e=$(".sidebar.visible");e.removeClass("visible"),window.removeAnimationTimeout=setTimeout((function(){e.removeClass("animate active").find(".done").removeClass("done")}),500),window.sidebarShown=0,window.allowSlide=1}}function y(e){if(e=void 0!==e&&e,$.isArray(window.popupShown)){var t=e||window.popupShown.slice(-1)[0],n=$('.popup.visible[data-popup-id="'+t+'"]'),i=n.find("iframe"),o=n.find("video");i.length>0&&$(i).each((function(e,t){var n=$(t).attr("src").indexOf("?autoplay")>-1?"?":"&";$(t).attr("src",$(t).attr("src").replace(n+"autoplay=1",""))})),o.length>0&&$(o).each((function(e,t){$(t)[0].pause(),$(t)[0].currentTime=0})),clearTimeout(window.clearPopupElementAnimation),n.addClass("hidePopup"),$(window).trigger("popupHidden"),setTimeout((function(){if(window.allowSlide=1,n.removeClass("visible animate active hidePopup").removeAttr("style").find(".done").removeClass("done"),k.removeClass("popup_"+t),$.isArray(window.popupShown)){var e=window.popupShown.indexOf(t);-1!=e&&window.popupShown.splice(e,1)}window.popupShown.length<=0&&(k.removeClass("popupShown"),window.popupShown=!1)}),500)}}$(m).length>0&&($(m).is(":empty")&&$(m).each((function(e,t){for(var n=1;n<=g;n++){var i=$(".slide:not(.exclude):eq("+(n-1)+")").data("title");void 0===i?$(t).append("<li></li>"):$(t).append('<li data-title="'+i+'"></li>')}})),$(".navigation li").on("click touchend",(function(){var e=$(this).index(),t=$(".slide:not(.exclude):eq("+e+")").index(".slide");$(this).blur(),window.changeSlide(t+1)})),$(".side").hasClass("compact")||$(window).on("load resize ready",(function(){var e=window.windowHeight-140,t=$(".side").removeClass("compact").find("ul"),n=0;$(t).children().each((function(){n+=Math.round($(this).outerHeight(!0))})),n>e?$(".side").addClass("compact"):$(".side").removeClass("compact")}))),$("a[href^='#'][target!='_blank']").click((function(e){var t=$(this).attr("href").split("#")[1],n=t?$('.slide[id="'+t+'"], .slide[data-name="'+t+'"]'):$(".slide:eq(0)");if(n.length>0){if(e.preventDefault(),window.isMobile&&window.isSimplifiedMobile||window.isScroll){var i=n;i.length&&$("html,body").stop().clearQueue().animate({scrollTop:i.position().top},1e3),window.setHashLink&&(window.location.hash=t)}else window.stage=$(".slide").index(n)+1,r(window.stage);w()}})),$(".sidebarTrigger[data-sidebar-id]").on("click",(function(){var e=$(this).data("sidebar-id");window.showSidebar(e)})),window.showSidebar=function(e){var t=e,n=$('.sidebar[data-sidebar-id="'+t+'"]'),i=$(n).hasClass("animated");window.sidebarShown?w():n.length>0&&(window.sidebarShown=1,window.allowSlide=0,$(n).removeClass("animate active").addClass("visible"),k.addClass("sidebarShown sidebar_"+t),$(n).find(".content").scrollTop(0),i&&(clearTimeout(window.removeAnimationTimeout),setTimeout((function(){$(n).addClass("animate active")}),100))),C()},$(document).on("mouseup touchstart",(function(e){var t=$(".sidebarShown .sidebar, .dropdownTrigger");!t.is(e.target)&&0===t.has(e.target).length&&window.hideSidebarOnBodyClick&&w()})),$('.sidebar .close, .sidebar [data-sidebar-action="close"]').on("click touchstart",(function(){w()})),$(".popupTrigger[data-popup-id]").on("click",(function(){var e=$(this).data("popup-id");window.showPopup(e)})),window.showPopup=function(e){var t=e,n=$('.popup[data-popup-id="'+t+'"]'),i=n.hasClass("animated");if(n.length>0&&(w(),$(n).addClass("visible"),$(window).trigger("popupShown"),i&&setTimeout((function(){$(n).addClass("animate active"),clearTimeout(window.clearPopupElementAnimation),window.clearPopupElementAnimation=setTimeout((function(){$(n).find("[class*='ae-']").addClass("done")}),window.effectSpeed+window.cleanupDelay)}),100),k.addClass("popupShown popup_"+t),$(n).find(".content").scrollTop(0),window.allowSlide=0,window.popupShown||(window.popupShown=[]),window.popupShown.push(t),$(n).hasClass("autoplay"))){var o=$(n),r=o.find("iframe"),s=o.find("video");if(r.length>0){var a=$(r).attr("src"),l=a.indexOf("?")>-1?"&":"?";$(r).attr("src",a+l+"autoplay=1")}else s.length>0&&$(s)[0].play()}C()},window.hidePopupOnBodyClick&&$(document).on("click",(function(e){var t=$(".popupShown .popup .popupContent, .popupTrigger");!t.is(e.target)&&0===t.has(e.target).length&&t.length>0&&y()})),$('.popup [data-popup-action="close"]').on("click",(function(){y($(this).parents(".popup").data("popup-id"))})),window.setPopupHash&&($(".popupTrigger[data-popup-id]").on("click",(function(){var e=$(this).attr("data-popup-id");window.location.hash="#"+e})),window.setPopupHash=[],$(".popupTrigger").each((function(){var e=$(this).attr("data-popup-id");-1==$.inArray(e,window.setPopupHash)&&window.setPopupHash.push(e)})),-1!==$.inArray(window.location.hash.split("#")[1],window.setPopupHash)&&(setTimeout((function(){$('.popupTrigger[data-popup-id="'+window.location.hash.split("#")[1]+'"]').click()}),500),$(window).on("popupHidden",(function(){history.pushState?window.history.pushState("","",location.href.split("#")[0]):window.location.hash=""})))),$(window).on("resize load ready popupShown",(function(){setTimeout((function(){var e;(e=$(".grid.equal, .flex.equal")).length&&$(e).each((function(e,t){var n=window.windowWidth,i=$(t).hasClass("later")?767:1024,o=(i=$(t).data("equal-collapse-width")?parseInt($(t).data("equal-collapse-width")):i,$(t).find(".equalElement")),r=$(this).hasClass("equalMobile");if(n>=i||r){var s=0;$(o).each((function(e,t){$(t).css("height","auto"),s<$(t).outerHeight()&&(s=$(t).outerHeight())})),$(t).find(".equalElement").each((function(e,t){$(t).css("height",s+"px")}))}else $(o).css("height","auto")}))}),1)})),$(window).on("resize",(function(){k.addClass("resizing")})).on("resizeEnd",(function(){k.removeClass("resizing")}));var b=$(".slider");$(b).length>0&&$(b).each((function(e,t){var n=$(t),i=n.data("slider-id"),o=n.find(".selected").index();if(window.sliderStatus&&k.removeClassByPrefix("slider_"+i).addClass("slider_"+i+"_"+o),n.hasClass("autoplay")){var r=n.data("slider-interval")?parseInt(n.data("slider-interval")):5e3,s=setInterval((function(){n.trigger("next")}),r);0!=n.data("slider-stoponclick")&&$('[data-slider-id="'+i+'"]').on("mousedown touchstart",(function(){clearInterval(s)}))}(n.hasClass("clickable")||n.hasClass("autoplay"))&&n.on("click next",(function(e){var t=$(this),n=t.children(".selected"),i=n.nextOrFirst("li"),o=i.index(),r=t.data("slider-id"),s=$('.controller[data-slider-id="'+r+'"]'),a=t.hasClass("animated"),l=e.target;"cancel"!=$(l).data("slider-event")&&(n.removeClass("selected").addClass("hide").one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",(function(){$(this).removeClass("hide")})),i.removeClass("hide").addClass("selected"),window.sliderStatus&&k.removeClassByPrefix("slider_"+r).addClass("slider_"+r+"_"+o),a&&(t.addClass("animateOnEvent"),t.find("li").removeClassByPrefix("ae-").removeClass("do"),t.find(".selected").each((function(e){$(this).removeClassByPrefix("ae-").removeClass("do").addClass("ae-"+(e+1)).addClass("do")})),$(window).scroll()),r&&s.length>0&&(s.children(".selected").removeClass("selected"),s.children("li:eq("+o+")").addClass("selected")))}))}));var _=$(".controller");if(_.length>0){var x=_.data("controller-selector")?_.data("controller-selector"):"li";_.on("click",x,(function(){var e=$(this),t=e.closest(".controller"),n=t.find(".selected"),i=$(t.find(x)).index(e),o=t.data("slider-id"),r=$('.slider[data-slider-id="'+o+'"]'),s=r.hasClass("animated");e.hasClass("selected")||(n.removeClass("selected"),e.addClass("selected"),r.children(".selected").removeClass("selected").addClass("hide").one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",(function(){$(this).removeClass("hide")})),r.children("li").eq(i).removeClass("hide").addClass("selected"),window.sliderStatus&&k.removeClassByPrefix("slider_"+sliderID).addClass("slider_"+sliderID+"_"+i)),s&&(r.addClass("animateOnEvent"),r.find(">li").removeClassByPrefix("ae-").removeClass("do"),r.find(".selected").each((function(e){$(this).removeClassByPrefix("ae-").removeClass("do").addClass("ae-"+(e+1)).addClass("do")})),$(window).scroll())}))}function T(e,t){t=void 0!==t&&t;var n=e.offset(),i=e.position(),o=window.popupShown?Math.ceil(i.top):Math.ceil(n.top),r=Math.ceil(n.left),s=e.data("dropdown-id"),a=$('.dropdown[data-dropdown-id="'+s+'"]'),l=(l=e.data("dropdown-position")?e.data("dropdown-position"):a.attr("class")).split(" ");t||C(),-1!=l.indexOf("bottom")?(o-=a.outerHeight(),a.removeClass("top").addClass("bottom")):(o+=e.outerHeight(),a.removeClass("bottom").addClass("top")),-1!=l.indexOf("right")?(r=r-a.outerWidth()+e.outerWidth(),a.removeClass("left center").addClass("right")):-1!=l.indexOf("left")?a.removeClass("right center").addClass("left"):-1!=l.indexOf("center")&&(r=r-a.outerWidth()/2+e.outerWidth()/2,a.removeClass("right left").addClass("center")),a.addClass("show").css("top",o).css("left",r),k.addClass("dropdownShown dropdown_"+s),window.dropdownShown=!0}function C(){window.dropdownShown&&(k.removeClass("dropdownShown").removeClassByPrefix("dropdown_"),window.dropdownShown=!1,a=0,$(".dropdown.show").addClass("hide").one("webkitTransitionEnd otransitionend msTransitionEnd transitionend",(function(){$(this).removeClass("show hide"),k.removeClass("dropdownShown").removeClassByPrefix("dropdown_")})),$(window).trigger("dropdownHidden"))}$("[data-slider-action]").click((function(){if($(this).data("slider-id")){var e,t,n=$(this),i=n.data("slider-id"),o=n.data("slider-action"),r=$('.slider[data-slider-id="'+i+'"]'),s=$('.controller[data-slider-id="'+i+'"]'),a=s.data("controller-selector")?s.data("controller-selector"):"li",l=r.find(".selected"),u=r.hasClass("animated");"next"===o?e=l.nextOrFirst("li"):"prev"===o?e=l.prevOrLast("li"):(parseInt(o)||0===o)&&(t=parseInt(o),e=r.find(">li:eq("+t+")")),t=e.index(),l.removeClass("selected"),e.removeClass("hide").addClass("selected"),window.sliderStatus&&k.removeClassByPrefix("slider_"+i).addClass("slider_"+i+"_"+t),u&&(r.addClass("animateOnEvent"),r.find("li").removeClassByPrefix("ae-").removeClass("do"),r.find(".selected").each((function(e){$(this).removeClassByPrefix("ae-").removeClass("do").addClass("ae-"+(e+1)).addClass("do")})),$(window).scroll()),i&&s.length>0&&(s.find(".selected").removeClass("selected").addClass("hide").one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",(function(){n.removeClass("hide")})),s.find(a).eq(t).addClass("selected"))}})),$("[data-slider-id].autoHeight").each((function(e,t){$(window).on("click resize load ready next",(function(){var e=0;$(t).find(".selected"),$(t).find(".selected").children().each((function(){e+=Math.round($(this).outerHeight(!0))})),$(t).height(e+"px")}))})),$(".slider.clickable[data-slider-id], .controller[data-slider-id]").on("click",(function(e){"cancel"!=$(e.target).data("slider-event")&&$(window).resize()})),window.dropdownShown=!1,$(".dropdownTrigger").on("click",(function(){T($(this))})),$(".dropdownTrigger.hover").hover((function(){T($(this),"hover")})),$(window).on("resize",(function(){C()})),$(document).on("mouseup touchstart",(function(e){var t=$(".dropdownShown .dropdown");!t.is(e.target)&&0===t.has(e.target).length&&window.dropdownShown&&C()})),window.shareUrl=window.location.href,$(".share").data("url")&&(window.shareUrl=$(".dropdown").data("url")),window.shareText=document.title,$(".share").data("text")&&(window.shareText=$(".dropdown").data("url")),$(".share").sharrre({enableHover:!1,url:window.shareUrl,text:window.shareText,enableCounter:!1,share:{twitter:!0,facebook:!0,pinterest:!0,googlePlus:!0,stumbleupon:!0,linkedin:!0},buttons:{pinterest:{media:$(".dropdown").data("pinterest-image"),description:$(".dropdown").data("text")+" "+$(".dropdown").data("url")}},template:$(".share").html(),render:function(e){$(e.element).on("click touchstart",".social-twitter",(function(){e.openPopup("twitter")})),$(e.element).on("click touchstart",".social-facebook",(function(){e.openPopup("facebook")})),$(e.element).on("click touchstart",".social-pinterest",(function(){e.openPopup("pinterest")})),$(e.element).on("click touchstart",".social-googlePlus",(function(){e.openPopup("googlePlus")})),$(e.element).on("click touchstart",".social-stumbleupon",(function(){e.openPopup("stumbleupon")})),$(e.element).on("click touchstart",".social-linkedin",(function(){e.openPopup("linkedin")})),$(e.element).on("click touchstart",".mail",(function(){var e=$(this).data("subject")?$(this).data("subject"):"",t=$(this).data("body")?$(this).data("body"):"",n=$(".dropdown").data("url")?$(".dropdown").data("url"):window.location.href;window.location.href="mailto:?subject="+encodeURIComponent(e)+"&body="+encodeURIComponent(t)+"%20"+n}))}}),$(".dialogTrigger[data-dialog-id]").on("click",(function(){var e=$(this).data("dialog-id");window.showDialog(e)})),window.showDialog=function(e){var t=$('.dialog[data-dialog-id="'+e+'"]');t.is(":visible")||t.addClass("reveal").slideDown(500,(function(){$(this).removeClass("reveal").removeClass("hidden")}))},$('.dialog [data-dialog-action="close"], .dialog [data-dialog-action="hide"]').on("click",(function(){var e=$(this).parents(".dialog"),t=$(this).data("dialog-action"),n=e.data("dialog-id"),i=e.data("set-cookie"),o=e.data("cookie-name")?e.data("cookie-name"):n,r=!e.data("cookie-value")||e.data("cookie-value"),s=e.data("cookie-path");e.addClass("hide").slideUp(500,(function(){$(this).removeClass("hide"),i&&"close"==t&&$.cookie(o,r,{expires:i,path:s})}))})),$(".dialog[data-set-cookie]").each((function(e,t){var n=$(t).data("dialog-id"),i=$(t).data("cookie-name")?$(t).data("cookie-name"):n;!$(t).data("cookie-value")||$(t).data("cookie-value"),$.cookie(i)&&$(t).hide()})),$(".dialog [data-href]").on("click",(function(){$(this).data("target")?window.open($(this).data("href"),"_blank"):window.location=$(this).data("href")})),$(".dialog.hidden[data-dialog-delay]").each((function(){var e=parseFloat($(this).attr("data-dialog-delay")),t=$(this);isNaN(e)||setTimeout((function(){t.addClass("reveal").slideDown(500,(function(){$(this).removeClass("reveal").removeClass("hidden")}))}),e)})),$(".dialog[data-dialog-hide-delay]").each((function(){var e=parseFloat($(this).attr("data-dialog-hide-delay")),t=$(this);isNaN(e)||setTimeout((function(){t.addClass("hide").slideUp(500,(function(){$(this).removeClass("hide")}))}),e)})),$('.dialog [data-type="submit"]').click((function(){$(this).parents("form").submit()})),$("#contact-form, [data-ajax-form]").each((function(e,t){$(t).ajaxForm((function(){var e=$(t),n=$(t).find('[type="submit"]'),i=!!n.is("input"),o=n.data("success-text")?n.data("success-text"):"Done!",r=n.data("success-class")?n.data("success-class"):"green",s=i?n.val():n.html(),a=n.attr("class");i?n.val(o):n.text(o),n.addClass(r),setTimeout((function(){i?n.val(s):n.html(s),n.attr("class",a),e[0].reset()}),4e3)}))})),$("audio[data-sound-id]").each((function(e,t){var n=$(t),i=n.data("sound-id"),o=n[0],r=$('.soundTrigger[data-sound-id="'+i+'"]');o.autoplay?r.addClass("playing"):r.removeClass("playing")})),$(".soundTrigger").click((function(){var e=$(this).data("sound-id"),t=$('audio[data-sound-id="'+e+'"]'),n=t.data("sound-action")?t.data("sound-action"):"toggle",i=parseInt(t.data("sound-fade"))>=0||t.data("sound-fade")?parseInt(t.data("sound-fade")):500;!t[0].paused||"toggle"!==n&&"play"!==n?"toggle"!==n&&"pause"!==n||(t.animate({volume:0},i,(function(){t[0].pause()})),$(this).removeClass("playing")):(t[0].play(),t.animate({volume:1},i),$(this).addClass("playing"))}))})),window.isMobile=!1,/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)&&(window.isMobile=!0),window.isMobile?k.addClass("mobile"):k.addClass("desktop"),window.isFirefox=navigator.userAgent.toLowerCase().indexOf("firefox")>-1,window.isSafari=/^((?!chrome).)*safari/i.test(navigator.userAgent),window.isChrome=/chrom(e|ium)/.test(navigator.userAgent.toLowerCase()),window.isChromeiOS=navigator.userAgent.match("CriOS"),window.isMSIE=navigator.userAgent.match("MSIE"),window.isEdge=navigator.userAgent.match("Edge"),window.isAndroid=navigator.userAgent.toLowerCase().indexOf("android")>-1,window.isiPad=null!==navigator.userAgent.match(/iPad/i),window.isWindows=-1!==navigator.platform.toUpperCase().indexOf("WIN"),window.isOSX=-1!==navigator.platform.toUpperCase().indexOf("MAC"),window.isLinux=-1!==navigator.platform.toUpperCase().indexOf("LINUX"),window.isSafari&&k.addClass("safari"),window.isFirefox&&k.addClass("firefox"),window.isChrome&&k.addClass("chrome"),window.isMSIE&&k.addClass("msie"),window.isEdge&&k.addClass("edge"),window.isAndroid&&k.addClass("android"),window.isWindows&&k.addClass("windows"),window.isOSX&&k.addClass("osx"),window.isLinux&&k.addClass("linux"),window.isRetina=window.matchMedia&&(window.matchMedia("only screen and (min-resolution: 124dpi), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dpcm)").matches||window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)").matches)||window.devicePixelRatio&&window.devicePixelRatio>1.3,window.isRetina&&k.addClass("retina")}},n={};function i(e){var o=n[e];if(void 0!==o)return o.exports;var r=n[e]={exports:{}};return t[e].call(r.exports,r,r.exports,i),r.exports}i.amdO={},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i(202)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,